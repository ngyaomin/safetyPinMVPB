'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _semanticUiReact = require('semantic-ui-react');

var _insurancePool = require('../ethereum/insurancePool');

var _insurancePool2 = _interopRequireDefault(_insurancePool);

var _web = require('../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsuranceMVPB/components/FundForm.js';


var FundForm = function (_Component) {
  (0, _inherits3.default)(FundForm, _Component);

  function FundForm() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, FundForm);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = FundForm.__proto__ || (0, _getPrototypeOf2.default)(FundForm)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      value: '',
      errorMessage: '',
      loading: false
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var insurancePool, accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();
                insurancePool = (0, _insurancePool2.default)(_this.props.address);

                _this.setState({ loading: true, errorMessage: '' });

                _context.prev = 3;
                _context.next = 6;
                return _web2.default.eth.getAccounts();

              case 6:
                accounts = _context.sent;
                _context.next = 9;
                return insurancePool.methods.fund().send({
                  from: accounts[0],
                  value: _web2.default.utils.toWei(_this.state.value, 'ether')
                });

              case 9:

                _routes.Router.replaceRoute('/insurancepools/' + _this.props.address);
                _context.next = 15;
                break;

              case 12:
                _context.prev = 12;
                _context.t0 = _context['catch'](3);

                _this.setState({ errorMessage: _context.t0.message });

              case 15:

                _this.setState({ loading: false, value: '' });

              case 16:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2, [[3, 12]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(FundForm, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 37
        }
      }, _react2.default.createElement(_semanticUiReact.Form.Field, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 38
        }
      }, _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 39
        }
      }, 'Premium to Join'), _react2.default.createElement('label', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 40
        }
      }, 'Pls note : The More you stake will allow you to earn more returns from our future liquidity pools but does not increase your voting power'), _react2.default.createElement(_semanticUiReact.Input, {
        value: this.state.value,
        onChange: function onChange(event) {
          return _this3.setState({ value: event.target.value });
        },
        label: 'ether',
        labelPosition: 'right',
        __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Alamak!', content: this.state.errorMessage, __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      }), _react2.default.createElement(_semanticUiReact.Button, { primary: true, loading: this.state.loading, __source: {
          fileName: _jsxFileName,
          lineNumber: 50
        }
      }, 'Pay Premium'), _react2.default.createElement('h5', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 53
        }
      }, ' Pls ensure you have logged in and connect to metamask for this site for transactions '));
    }
  }]);

  return FundForm;
}(_react.Component);

exports.default = FundForm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiRnVuZEZvcm0iLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsInZhbHVlIiwiZXJyb3JNZXNzYWdlIiwibG9hZGluZyIsIm9uU3VibWl0IiwiX3JlZjIiLCJtYXJrIiwiX2NhbGxlZSIsImV2ZW50IiwiaW5zdXJhbmNlUG9vbCIsImFjY291bnRzIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInByZXZlbnREZWZhdWx0IiwicHJvcHMiLCJhZGRyZXNzIiwic2V0U3RhdGUiLCJldGgiLCJnZXRBY2NvdW50cyIsInNlbnQiLCJtZXRob2RzIiwiZnVuZCIsInNlbmQiLCJmcm9tIiwidXRpbHMiLCJ0b1dlaSIsInJlcGxhY2VSb3V0ZSIsInQwIiwibWVzc2FnZSIsInN0b3AiLCJfeCIsImtleSIsInJlbmRlciIsIl90aGlzMyIsImNyZWF0ZUVsZW1lbnQiLCJlcnJvciIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiRmllbGQiLCJvbkNoYW5nZSIsInRhcmdldCIsImxhYmVsIiwibGFiZWxQb3NpdGlvbiIsImhlYWRlciIsImNvbnRlbnQiLCJwcmltYXJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBTEEsSUFBSUEsZUFBZSwrREFBbkI7OztBQU9BLElBQUlDLFdBQVcsVUFBVUMsVUFBVixFQUFzQjtBQUNuQywwQkFBVUQsUUFBVixFQUFvQkMsVUFBcEI7O0FBRUEsV0FB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ekIwQyxrQkFBVSxTQUFTQSxRQUFULENBQWtCbkMsS0FBbEIsRUFBeUI7QUFDakMsaUJBQU80QixPQUFPakIsUUFBUCxDQUFnQixFQUFFbEIsT0FBT08sTUFBTW9DLE1BQU4sQ0FBYTNDLEtBQXRCLEVBQWhCLENBQVA7QUFDRCxTQUp3QjtBQUt6QjRDLGVBQU8sT0FMa0I7QUFNekJDLHVCQUFlLE9BTlU7QUFPekJQLGtCQUFVO0FBQ1JDLG9CQUFVMUQsWUFERjtBQUVSMkQsc0JBQVk7QUFGSjtBQVBlLE9BQTNCLENBNUJGLENBUEssRUFnREwsZ0JBQU1KLGFBQU4sMkJBQTZCLEVBQUVDLE9BQU8sSUFBVCxFQUFlUyxRQUFRLFNBQXZCLEVBQWtDQyxTQUFTLEtBQUtoRCxLQUFMLENBQVdFLFlBQXRELEVBQW9FcUMsVUFBVTtBQUN2R0Msb0JBQVUxRCxZQUQ2RjtBQUV2RzJELHNCQUFZO0FBRjJGO0FBQTlFLE9BQTdCLENBaERLLEVBcURMLGdCQUFNSixhQUFOLDBCQUVFLEVBQUVZLFNBQVMsSUFBWCxFQUFpQjlDLFNBQVMsS0FBS0gsS0FBTCxDQUFXRyxPQUFyQyxFQUE4Q29DLFVBQVU7QUFDcERDLG9CQUFVMUQsWUFEMEM7QUFFcEQyRCxzQkFBWTtBQUZ3QztBQUF4RCxPQUZGLEVBT0UsYUFQRixDQXJESyxFQThETCxnQkFBTUosYUFBTixDQUNFLElBREYsRUFFRTtBQUNFRSxrQkFBVTtBQUNSQyxvQkFBVTFELFlBREY7QUFFUjJELHNCQUFZO0FBRko7QUFEWixPQUZGLEVBUUUsd0ZBUkYsQ0E5REssQ0FBUDtBQXlFRDtBQTlFcUIsR0FBRCxDQUF2Qjs7QUFpRkEsU0FBTzFELFFBQVA7QUFDRCxDQTVKYyxrQkFBZjs7a0JBOEplQSxRIiwiZmlsZSI6InVua25vd24iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX3JlZ2VuZXJhdG9yUnVudGltZSBmcm9tICdiYWJlbC1ydW50aW1lL3JlZ2VuZXJhdG9yJztcbmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvYXN5bmNUb0dlbmVyYXRvcic7XG5pbXBvcnQgX09iamVjdCRnZXRQcm90b3R5cGVPZiBmcm9tICdiYWJlbC1ydW50aW1lL2NvcmUtanMvb2JqZWN0L2dldC1wcm90b3R5cGUtb2YnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbnZhciBfanN4RmlsZU5hbWUgPSAnL1VzZXJzL3lhb21pbi9kaXN0cmlidXRlZEluc3VyYW5jZU1WUEIvY29tcG9uZW50cy9GdW5kRm9ybS5qcyc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRm9ybSwgSW5wdXQsIE1lc3NhZ2UsIEJ1dHRvbiB9IGZyb20gJ3NlbWFudGljLXVpLXJlYWN0JztcbmltcG9ydCBJbnN1cmFuY2VQb29sIGZyb20gJy4uL2V0aGVyZXVtL2luc3VyYW5jZVBvb2wnO1xuaW1wb3J0IHdlYjMgZnJvbSAnLi4vZXRoZXJldW0vd2ViMyc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICcuLi9yb3V0ZXMnO1xuXG52YXIgRnVuZEZvcm0gPSBmdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoRnVuZEZvcm0sIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEZ1bmRGb3JtKCkge1xuICAgIHZhciBfcmVmLFxuICAgICAgICBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBGdW5kRm9ybSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gRnVuZEZvcm0uX19wcm90b19fIHx8IF9PYmplY3QkZ2V0UHJvdG90eXBlT2YoRnVuZEZvcm0pKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHZhbHVlOiAnJyxcbiAgICAgIGVycm9yTWVzc2FnZTogJycsXG4gICAgICBsb2FkaW5nOiBmYWxzZVxuICAgIH0sIF90aGlzLm9uU3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIF9yZWYyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShldmVudCkge1xuICAgICAgICB2YXIgaW5zdXJhbmNlUG9vbCwgYWNjb3VudHM7XG4gICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHtcbiAgICAgICAgICB3aGlsZSAoMSkge1xuICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkge1xuICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICBpbnN1cmFuY2VQb29sID0gSW5zdXJhbmNlUG9vbChfdGhpcy5wcm9wcy5hZGRyZXNzKTtcblxuXG4gICAgICAgICAgICAgICAgX3RoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiB0cnVlLCBlcnJvck1lc3NhZ2U6ICcnIH0pO1xuXG4gICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDM7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdlYjMuZXRoLmdldEFjY291bnRzKCk7XG5cbiAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIGFjY291bnRzID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gOTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdXJhbmNlUG9vbC5tZXRob2RzLmZ1bmQoKS5zZW5kKHtcbiAgICAgICAgICAgICAgICAgIGZyb206IGFjY291bnRzWzBdLFxuICAgICAgICAgICAgICAgICAgdmFsdWU6IHdlYjMudXRpbHMudG9XZWkoX3RoaXMuc3RhdGUudmFsdWUsICdldGhlcicpXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSA5OlxuXG4gICAgICAgICAgICAgICAgUm91dGVyLnJlcGxhY2VSb3V0ZSgnL2luc3VyYW5jZXBvb2xzLycgKyBfdGhpcy5wcm9wcy5hZGRyZXNzKTtcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTI7XG4gICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsnY2F0Y2gnXSgzKTtcblxuICAgICAgICAgICAgICAgIF90aGlzLnNldFN0YXRlKHsgZXJyb3JNZXNzYWdlOiBfY29udGV4dC50MC5tZXNzYWdlIH0pO1xuXG4gICAgICAgICAgICAgIGNhc2UgMTU6XG5cbiAgICAgICAgICAgICAgICBfdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IGZhbHNlLCB2YWx1ZTogJycgfSk7XG5cbiAgICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSwgX2NhbGxlZSwgX3RoaXMyLCBbWzMsIDEyXV0pO1xuICAgICAgfSkpO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKF94KSB7XG4gICAgICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9KCksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEZ1bmRGb3JtLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgRm9ybSxcbiAgICAgICAgeyBvblN1Ym1pdDogdGhpcy5vblN1Ym1pdCwgZXJyb3I6ICEhdGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UsIF9fc291cmNlOiB7XG4gICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgbGluZU51bWJlcjogMzdcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgRm9ybS5GaWVsZCxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAzOFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdsYWJlbCcsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAzOVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ1ByZW1pdW0gdG8gSm9pbidcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnbGFiZWwnLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogNDBcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdQbHMgbm90ZSA6IFRoZSBNb3JlIHlvdSBzdGFrZSB3aWxsIGFsbG93IHlvdSB0byBlYXJuIG1vcmUgcmV0dXJucyBmcm9tIG91ciBmdXR1cmUgbGlxdWlkaXR5IHBvb2xzIGJ1dCBkb2VzIG5vdCBpbmNyZWFzZSB5b3VyIHZvdGluZyBwb3dlcidcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoSW5wdXQsIHtcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLnN0YXRlLnZhbHVlLFxuICAgICAgICAgICAgb25DaGFuZ2U6IGZ1bmN0aW9uIG9uQ2hhbmdlKGV2ZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpczMuc2V0U3RhdGUoeyB2YWx1ZTogZXZlbnQudGFyZ2V0LnZhbHVlIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxhYmVsOiAnZXRoZXInLFxuICAgICAgICAgICAgbGFiZWxQb3NpdGlvbjogJ3JpZ2h0JyxcbiAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDQxXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSlcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChNZXNzYWdlLCB7IGVycm9yOiB0cnVlLCBoZWFkZXI6ICdBbGFtYWshJywgY29udGVudDogdGhpcy5zdGF0ZS5lcnJvck1lc3NhZ2UsIF9fc291cmNlOiB7XG4gICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgbGluZU51bWJlcjogNDlcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIEJ1dHRvbixcbiAgICAgICAgICB7IHByaW1hcnk6IHRydWUsIGxvYWRpbmc6IHRoaXMuc3RhdGUubG9hZGluZywgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgbGluZU51bWJlcjogNTBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgICdQYXkgUHJlbWl1bSdcbiAgICAgICAgKSxcbiAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnaDUnLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDUzXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICAnIFBscyBlbnN1cmUgeW91IGhhdmUgbG9nZ2VkIGluIGFuZCBjb25uZWN0IHRvIG1ldGFtYXNrIGZvciB0aGlzIHNpdGUgZm9yIHRyYW5zYWN0aW9ucyAnXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEZ1bmRGb3JtO1xufShDb21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBGdW5kRm9ybTsiXX0=
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiRnVuZEZvcm0iLCJfQ29tcG9uZW50IiwiX3JlZiIsIl90aGlzMiIsIl90ZW1wIiwiX3RoaXMiLCJfcmV0IiwiX2xlbiIsImFyZ3VtZW50cyIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJfX3Byb3RvX18iLCJjYWxsIiwiYXBwbHkiLCJjb25jYXQiLCJzdGF0ZSIsInZhbHVlIiwiZXJyb3JNZXNzYWdlIiwibG9hZGluZyIsIm9uU3VibWl0IiwiX3JlZjIiLCJtYXJrIiwiX2NhbGxlZSIsImV2ZW50IiwiaW5zdXJhbmNlUG9vbCIsImFjY291bnRzIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInByZXZlbnREZWZhdWx0IiwicHJvcHMiLCJhZGRyZXNzIiwic2V0U3RhdGUiLCJldGgiLCJnZXRBY2NvdW50cyIsInNlbnQiLCJtZXRob2RzIiwiZnVuZCIsInNlbmQiLCJmcm9tIiwidXRpbHMiLCJ0b1dlaSIsInJlcGxhY2VSb3V0ZSIsInQwIiwibWVzc2FnZSIsInN0b3AiLCJfeCIsImtleSIsInJlbmRlciIsIl90aGlzMyIsImNyZWF0ZUVsZW1lbnQiLCJlcnJvciIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiRmllbGQiLCJvbkNoYW5nZSIsInRhcmdldCIsImxhYmVsIiwibGFiZWxQb3NpdGlvbiIsImhlYWRlciIsImNvbnRlbnQiLCJwcmltYXJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBTEEsSUFBSUEsZUFBZSwrREFBbkI7OztBQU9BLElBQUlDLFdBQVcsVUFBVUMsVUFBVixFQUFzQjtBQUNuQywwQkFBVUQsUUFBVixFQUFvQkMsVUFBcEI7O0FBRUEsV0FB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