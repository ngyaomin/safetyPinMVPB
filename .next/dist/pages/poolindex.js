'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

var _ticker = require('./ticker');

var _ticker2 = _interopRequireDefault(_ticker);

var _deployedTo = require('../ethereum/deployedTo');

var _deployedTo2 = _interopRequireDefault(_deployedTo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsuranceMVPB/pages/poolindex.js?entry';


var InsurancePoolIndex = function (_Component) {
  (0, _inherits3.default)(InsurancePoolIndex, _Component);

  function InsurancePoolIndex() {
    (0, _classCallCheck3.default)(this, InsurancePoolIndex);

    return (0, _possibleConstructorReturn3.default)(this, (InsurancePoolIndex.__proto__ || (0, _getPrototypeOf2.default)(InsurancePoolIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(InsurancePoolIndex, [{
    key: 'renderInsurancePools',
    value: function renderInsurancePools() {
      var items = this.props.insurancePools.map(function (address) {
        return {
          header: address,
          description: _react2.default.createElement('div', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 27
            }
          }, _react2.default.createElement('i', { 'class': 'hand point right outline icon', __source: {
              fileName: _jsxFileName,
              lineNumber: 28
            }
          }), _react2.default.createElement(_routes.Link, { route: '/insurancepools/' + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 29
            }
          }, _react2.default.createElement('a', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          }, _react2.default.createElement('b', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          }, _react2.default.createElement('mark', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          }, 'View this Pool')))), '\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0', _react2.default.createElement('i', { 'class': 'ethereum icon', __source: {
              fileName: _jsxFileName,
              lineNumber: 33
            }
          }), _react2.default.createElement(_routes.Link, { route: 'https://rinkeby.etherscan.io/address/' + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 34
            }
          }, _react2.default.createElement('a', { target: '_blank', __source: {
              fileName: _jsxFileName,
              lineNumber: 35
            }
          }, 'View in Etherscan'))),
          fluid: true
        };
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 43
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 51
        }
      }, _react2.default.createElement(_ticker2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 54
        }
      }), _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 56
        }
      }, _react2.default.createElement('h7', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }, 'We are not rasing any money, we are only accepting donations.', _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 58
        }
      }), ' For more info email \xA0', _react2.default.createElement('a', { href: 'mailto:NG_YAO_MIN01.PT@ICHAT.SP.EDU.SG', __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }, _react2.default.createElement('u', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      }, 'givemeyourmoney@cheatyourmoney.io')), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 62
        }
      }), 'You can also see our latest smart contract', _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 65
        }
      }), _react2.default.createElement(_routes.Link, { route: 'https://rinkeby.etherscan.io/address/' + _deployedTo2.default, __source: {
          fileName: _jsxFileName,
          lineNumber: 66
        }
      }, _react2.default.createElement('a', { target: '_blank', __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        }
      }, '\'$', _deployedTo2.default, '\''))), _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 75
        }
      }, 'Open Safety Pins Pools'), _react2.default.createElement(_routes.Link, { route: '/insurancepools/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 77
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 78
        }
      }, _react2.default.createElement(_semanticUiReact.Button, {
        floated: 'right',
        content: 'Create New Pool',
        icon: 'add circle' // the icon name is in document, be exact
        , primary: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 79
        }
      }))), this.renderInsurancePools(), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      }), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      }), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      })));
    }
  }], [{
    key: 'getInitialProps',

    // creating a instance of class to get access to
    // static asign the function not to instance of the class but to class itself

    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var insurancePools;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _factory2.default.methods.getDeployedInsurancePools().call();

              case 2:
                insurancePools = _context.sent;
                return _context.abrupt('return', { insurancePools: insurancePools });

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return InsurancePoolIndex;
}(_react.Component);

exports.default = InsurancePoolIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSW5zdXJhbmNlUG9vbEluZGV4IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJJbnN1cmFuY2VQb29scyIsIml0ZW1zIiwicHJvcHMiLCJpbnN1cmFuY2VQb29scyIsIm1hcCIsImFkZHJlc3MiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJvdXRlIiwidGFyZ2V0IiwiZmx1aWQiLCJHcm91cCIsInJlbmRlciIsImhyZWYiLCJmbG9hdGVkIiwiY29udGVudCIsImljb24iLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIm1ldGhvZHMiLCJnZXREZXBsb3llZEluc3VyYW5jZVBvb2xzIiwiY2FsbCIsInNlbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7OztBQVBBLElBQUlBLGVBQWUsaUVBQW5COzs7QUFTQSxJQUFJQyxxQkFBcUIsVUFBVUMsVUFBVixFQUFzQjtBQUM3QywwQkFBVUQsa0JBQVYsRUFBOEJDLFVBQTlCOztBQUVBLFdBQVNELGtCQUFULEdBQThCO0FBQzVCLGtDQUFnQixJQUFoQixFQUFzQkEsa0JBQXRCOztBQUVBLFdBQU8seUNBQTJCLElBQTNCLEVBQWlDLENBQUNBLG1CQUFtQkUsU0FBbkIsSUFBZ0MsOEJBQXVCRixrQkFBdkIsQ0FBakMsRUFBNkVHLEtBQTdFLENBQW1GLElB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