'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

var _ticker = require('./ticker');

var _ticker2 = _interopRequireDefault(_ticker);

var _deployedTo = require('../ethereum/deployedTo');

var _deployedTo2 = _interopRequireDefault(_deployedTo);

var _ethereumPrice = require('./ethereumPrice');

var _ethereumPrice2 = _interopRequireDefault(_ethereumPrice);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsuranceMVPB/pages/poolindex.js?entry';


var InsurancePoolIndex = function (_Component) {
  (0, _inherits3.default)(InsurancePoolIndex, _Component);

  function InsurancePoolIndex() {
    (0, _classCallCheck3.default)(this, InsurancePoolIndex);

    return (0, _possibleConstructorReturn3.default)(this, (InsurancePoolIndex.__proto__ || (0, _getPrototypeOf2.default)(InsurancePoolIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(InsurancePoolIndex, [{
    key: 'renderInsurancePools',
    value: function renderInsurancePools() {
      var items = this.props.insurancePools.map(function (address) {
        return {
          header: address,
          description: _react2.default.createElement('div', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 28
            }
          }, _react2.default.createElement('i', { 'class': 'hand point right outline icon', __source: {
              fileName: _jsxFileName,
              lineNumber: 29
            }
          }), _react2.default.createElement(_routes.Link, { route: '/insurancepools/' + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          }, _react2.default.createElement('a', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 31
            }
          }, _react2.default.createElement('b', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 31
            }
          }, _react2.default.createElement('mark', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 31
            }
          }, 'View this Pool')))), '\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0', _react2.default.createElement('i', { 'class': 'ethereum icon', __source: {
              fileName: _jsxFileName,
              lineNumber: 34
            }
          }), _react2.default.createElement(_routes.Link, { route: 'https://rinkeby.etherscan.io/address/' + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 35
            }
          }, _react2.default.createElement('a', { target: '_blank', __source: {
              fileName: _jsxFileName,
              lineNumber: 36
            }
          }, 'View in Etherscan'))),
          fluid: true
        };
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 44
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 52
        }
      }, _react2.default.createElement(_ticker2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 55
        }
      }), _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }, _react2.default.createElement('h7', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 58
        }
      }, 'We are not rasing any money, we are only accepting donations.', _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }), ' For more info email \xA0', _react2.default.createElement('a', { href: 'mailto:NG_YAO_MIN01.PT@ICHAT.SP.EDU.SG', __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      }, _react2.default.createElement('u', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 61
        }
      }, 'givemeyourmoney@cheatyourmoney.io')), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 63
        }
      }), 'You can also see our latest smart contract', _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 66
        }
      }), _react2.default.createElement(_routes.Link, { route: 'https://rinkeby.etherscan.io/address/' + _deployedTo2.default, __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        }
      }, _react2.default.createElement('a', { target: '_blank', __source: {
          fileName: _jsxFileName,
          lineNumber: 68
        }
      }, '\'$', _deployedTo2.default, '\''))), _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 76
        }
      }, 'Open Safety Pins Pools'), _react2.default.createElement(_routes.Link, { route: '/insurancepools/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 78
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 79
        }
      }, _react2.default.createElement(_semanticUiReact.Button, {
        floated: 'right',
        content: 'Create New Pool',
        icon: 'add circle' // the icon name is in document, be exact
        , primary: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 80
        }
      }))), this.renderInsurancePools(), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        }
      }), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        }
      }), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        }
      })));
    }
  }], [{
    key: 'getInitialProps',

    // creating a instance of class to get access to
    // static asign the function not to instance of the class but to class itself

    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var insurancePools;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _factory2.default.methods.getDeployedInsurancePools().call();

              case 2:
                insurancePools = _context.sent;
                return _context.abrupt('return', { insurancePools: insurancePools });

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return InsurancePoolIndex;
}(_react.Component);

exports.default = InsurancePoolIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSW5zdXJhbmNlUG9vbEluZGV4IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJJbnN1cmFuY2VQb29scyIsIml0ZW1zIiwicHJvcHMiLCJpbnN1cmFuY2VQb29scyIsIm1hcCIsImFkZHJlc3MiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJvdXRlIiwidGFyZ2V0IiwiZmx1aWQiLCJHcm91cCIsInJlbmRlciIsImhyZWYiLCJmbG9hdGVkIiwiY29udGVudCIsImljb24iLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIm1ldGhvZHMiLCJnZXREZXBsb3llZEluc3VyYW5jZVBvb2xzIiwiY2FsbCIsInNlbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBUkEsSUFBSUEsZUFBZSxpRUFBbkI7OztBQVVBLElBQUlDLHFCQUFxQixVQUFVQyxVQUFWLEVBQXNCO0FBQzdDLDBCQUFVRCxrQkFBVixFQUE4QkMsVUFBOUI7O0FBRUEsV0FBU0Qsa0JBQVQsR0FBOEI7QUFDNUIsa0NBQWdCLElBQWhCLEVBQXNCQSxrQkFBdEI7O0FBRUEsV0FBTyx5Q0FBMkIsSUFBM0IsRUFBaUMsQ0FBQ0EsbUJBQW1CRSxTQUFuQixJQUFnQyw4QkFBdUJGLGtCQUF2QixDQUFqQyxFQUE2RUcsS0FBN0Us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