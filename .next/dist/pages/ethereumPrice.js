'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ethereumPrice = exports.infuraLinkKovan = undefined;

var _web = require('web3');

var _web2 = _interopRequireDefault(_web);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

require('dotenv').config();
var infuraLinkKovan = process.env.infuraLinkKovan;

function ethereumPrice() {

  var web3 = new _web2.default(infuraLinkKovan);
  var aggregatorV3InterfaceABI = [{ "inputs": [], "name": "decimals", "outputs": [{ "internalType": "uint8", "name": "", "type": "uint8" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "description", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint80", "name": "_roundId", "type": "uint80" }], "name": "getRoundData", "outputs": [{ "internalType": "uint80", "name": "roundId", "type": "uint80" }, { "internalType": "int256", "name": "answer", "type": "int256" }, { "internalType": "uint256", "name": "startedAt", "type": "uint256" }, { "internalType": "uint256", "name": "updatedAt", "type": "uint256" }, { "internalType": "uint80", "name": "answeredInRound", "type": "uint80" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "latestRoundData", "outputs": [{ "internalType": "uint80", "name": "roundId", "type": "uint80" }, { "internalType": "int256", "name": "answer", "type": "int256" }, { "internalType": "uint256", "name": "startedAt", "type": "uint256" }, { "internalType": "uint256", "name": "updatedAt", "type": "uint256" }, { "internalType": "uint80", "name": "answeredInRound", "type": "uint80" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "version", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }];
  var priceFeed = new web3.eth.Contract(aggregatorV3InterfaceABI, addr);

  priceFeed.methods.latestRoundData().call().then(function (roundData) {
    console.log("Latest Round Data", roundData);
    return roundData;
  });
}

exports.infuraLinkKovan = infuraLinkKovan;
exports.ethereumPrice = ethereumPrice;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsicmVxdWlyZSIsImNvbmZpZyIsImluZnVyYUxpbmtLb3ZhbiIsInByb2Nlc3MiLCJlbnYiLCJldGhlcmV1bVByaWNlIiwid2ViMyIsImFnZ3JlZ2F0b3JWM0ludGVyZmFjZUFCSSIsInByaWNlRmVlZCIsImV0aCIsIkNvbnRyYWN0IiwiYWRkciIsIm1ldGhvZHMiLCJsYXRlc3RSb3VuZERhdGEiLCJjYWxsIiwidGhlbiIsInJvdW5kRGF0YSIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7O0FBQ0FBLGtCQUFrQkMsTUFBbEI7QUFDQSxJQUFJQyxrQkFBa0JDLFFBQVFDLEdBQVIsQ0FBWUYsZUFBbEM7O0FBRUEsU0FBU0csYUFBVCxHQUF5Qjs7QUFFdkIsTUFBSUMsT0FBTyxrQkFBU0osZUFBVCxDQUFYO0FBQ0EsTUFBSUssMkJBQTJCLENBQUMsRUFBRSxVQUFVLEVBQVosRUFBZ0IsUUFBUSxVQUF4QixFQUFvQyxXQUFXLENBQUMsRUFBRSxnQkFBZ0IsT0FBbEIsRUFBMkIsUUFBUSxFQUFuQyxFQUF1QyxRQUFRLE9BQS9DLEVBQUQsQ0FBL0MsRUFBMkcsbUJBQW1CLE1BQTlILEVBQXNJLFFBQVEsVUFBOUksRUFBRCxFQUE2SixFQUFFLFVBQVUsRUFBWixFQUFnQixRQUFRLGFBQXhCLEVBQXVDLFdBQVcsQ0FBQyxFQUFFLGdCQUFnQixRQUFsQixFQUE0QixRQUFRLEVBQXBDLEVBQXdDLFFBQVEsUUFBaEQsRUFBRCxDQUFsRCxFQUFnSCxtQkFBbUIsTUFBbkksRUFBMkksUUFBUSxVQUFuSixFQUE3SixFQUE4VCxFQUFFLFVBQVUsQ0FBQyxFQUFFLGdCQUFnQixRQUFsQixFQUE0QixRQUFRLFVBQXBDLEVBQWdELFFBQVEsUUFBeEQsRUFBRCxDQUFaLEVBQWtGLFFBQVEsY0FBMUYsRUFBMEcsV0FBVyxDQUFDLEVBQUUsZ0JBQWdCLFFBQWxCLEVBQTRCLFFBQVEsU0FBcEMsRUFBK0MsUUFBUSxRQUF2RCxFQUFELEVBQW9FLEVBQUUsZ0JBQWdCLFFBQWxCLEVBQTRCLFFBQVEsUUFBcEMsRUFBOEMsUUFBUSxRQUF0RCxFQUFwRSxFQUFzSSxFQUFFLGdCQUFnQixTQUFsQixFQUE2QixRQUFRLFdBQXJDLEVBQWtELFFBQVEsU0FBMUQsRUFBdEksRUFBNk0sRUFBRSxnQkFBZ0IsU0FBbEIsRUFBNkIsUUFBUSxXQUFyQyxFQUFrRCxRQUFRLFNBQTFELEVBQTdNLEVBQW9SLEVBQUUsZ0JBQWdCLFFBQWxCLEVBQTRCLFFBQVEsaUJBQXBDLEVBQXVELFFBQVEsUUFBL0QsRUFBcFIsQ0FBckgsRUFBcWQsbUJBQW1CLE1BQXhlLEVBQWdmLFFBQVEsVUFBeGYsRUFBOVQsRUFBbzBCLEVBQUUsVUFBVSxFQUFaLEVBQWdCLFFBQVEsaUJBQXhCLEVBQTJDLFdBQVcsQ0FBQyxFQUFFLGdCQUFnQixRQUFsQixFQUE0QixRQUFRLFNBQXBDLEVBQStDLFFBQVEsUUFBdkQsRUFBRCxFQUFvRSxFQUFFLGdCQUFnQixRQUFsQixFQUE0QixRQUFRLFFBQXBDLEVBQThDLFFBQVEsUUFBdEQsRUFBcEUsRUFBc0ksRUFBRSxnQkFBZ0IsU0FBbEIsRUFBNkIsUUFBUSxXQUFyQyxFQUFrRCxRQUFRLFNBQTFELEVBQXRJLEVBQTZNLEVBQUUsZ0JBQWdCLFNBQWxCLEVBQTZCLFFBQVEsV0FBckMsRUFBa0QsUUFBUSxTQUExRCxFQUE3TSxFQUFvUixFQUFFLGdCQUFnQixRQUFsQixFQUE0QixRQUFRLGlCQUFwQyxFQUF1RCxRQUFRLFFBQS9ELEVBQXBSLENBQXRELEVBQXNaLG1CQUFtQixNQUF6YSxFQUFpYixRQUFRLFVBQXpiLEVBQXAwQixFQUEyd0MsRUFBRSxVQUFVLEVBQVosRUFBZ0IsUUFBUSxTQUF4QixFQUFtQyxXQUFXLENBQUMsRUFBRSxnQkFBZ0IsU0FBbEIsRUFBNkIsUUFBUSxFQUFyQyxFQUF5QyxRQUFRLFNBQWpELEVBQUQsQ0FBOUMsRUFBOEcsbUJBQW1CLE1BQWpJLEVBQXlJLFFBQVEsVUFBakosRUFBM3dDLENBQS9CO0FBQ0EsTUFBSUMsWUFBWSxJQUFJRixLQUFLRyxHQUFMLENBQVNDLFFBQWIsQ0FBc0JILHdCQUF0QixFQUFnREksSUFBaEQsQ0FBaEI7O0FBRUFILFlBQVVJLE9BQVYsQ0FBa0JDLGVBQWxCLEdBQW9DQyxJQUFwQyxHQUEyQ0MsSUFBM0MsQ0FBZ0QsVUFBVUMsU0FBVixFQUFxQjtBQUNuRUMsWUFBUUMsR0FBUixDQUFZLG1CQUFaLEVBQWlDRixTQUFqQztBQUNBLFdBQU9BLFNBQVA7QUFDRCxHQUhEO0FBSUQ7O1FBRVFkLGUsR0FBQUEsZTtRQUFpQkcsYSxHQUFBQSxhIiwiZmlsZSI6InVua25vd24iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgV2ViMyBmcm9tICd3ZWIzJztcbnJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpO1xudmFyIGluZnVyYUxpbmtLb3ZhbiA9IHByb2Nlc3MuZW52LmluZnVyYUxpbmtLb3ZhbjtcblxuZnVuY3Rpb24gZXRoZXJldW1QcmljZSgpIHtcblxuICB2YXIgd2ViMyA9IG5ldyBXZWIzKGluZnVyYUxpbmtLb3Zhbik7XG4gIHZhciBhZ2dyZWdhdG9yVjNJbnRlcmZhY2VBQkkgPSBbeyBcImlucHV0c1wiOiBbXSwgXCJuYW1lXCI6IFwiZGVjaW1hbHNcIiwgXCJvdXRwdXRzXCI6IFt7IFwiaW50ZXJuYWxUeXBlXCI6IFwidWludDhcIiwgXCJuYW1lXCI6IFwiXCIsIFwidHlwZVwiOiBcInVpbnQ4XCIgfV0sIFwic3RhdGVNdXRhYmlsaXR5XCI6IFwidmlld1wiLCBcInR5cGVcIjogXCJmdW5jdGlvblwiIH0sIHsgXCJpbnB1dHNcIjogW10sIFwibmFtZVwiOiBcImRlc2NyaXB0aW9uXCIsIFwib3V0cHV0c1wiOiBbeyBcImludGVybmFsVHlwZVwiOiBcInN0cmluZ1wiLCBcIm5hbWVcIjogXCJcIiwgXCJ0eXBlXCI6IFwic3RyaW5nXCIgfV0sIFwic3RhdGVNdXRhYmlsaXR5XCI6IFwidmlld1wiLCBcInR5cGVcIjogXCJmdW5jdGlvblwiIH0sIHsgXCJpbnB1dHNcIjogW3sgXCJpbnRlcm5hbFR5cGVcIjogXCJ1aW50ODBcIiwgXCJuYW1lXCI6IFwiX3JvdW5kSWRcIiwgXCJ0eXBlXCI6IFwidWludDgwXCIgfV0sIFwibmFtZVwiOiBcImdldFJvdW5kRGF0YVwiLCBcIm91dHB1dHNcIjogW3sgXCJpbnRlcm5hbFR5cGVcIjogXCJ1aW50ODBcIiwgXCJuYW1lXCI6IFwicm91bmRJZFwiLCBcInR5cGVcIjogXCJ1aW50ODBcIiB9LCB7IFwiaW50ZXJuYWxUeXBlXCI6IFwiaW50MjU2XCIsIFwibmFtZVwiOiBcImFuc3dlclwiLCBcInR5cGVcIjogXCJpbnQyNTZcIiB9LCB7IFwiaW50ZXJuYWxUeXBlXCI6IFwidWludDI1NlwiLCBcIm5hbWVcIjogXCJzdGFydGVkQXRcIiwgXCJ0eXBlXCI6IFwidWludDI1NlwiIH0sIHsgXCJpbnRlcm5hbFR5cGVcIjogXCJ1aW50MjU2XCIsIFwibmFtZVwiOiBcInVwZGF0ZWRBdFwiLCBcInR5cGVcIjogXCJ1aW50MjU2XCIgfSwgeyBcImludGVybmFsVHlwZVwiOiBcInVpbnQ4MFwiLCBcIm5hbWVcIjogXCJhbnN3ZXJlZEluUm91bmRcIiwgXCJ0eXBlXCI6IFwidWludDgwXCIgfV0sIFwic3RhdGVNdXRhYmlsaXR5XCI6IFwidmlld1wiLCBcInR5cGVcIjogXCJmdW5jdGlvblwiIH0sIHsgXCJpbnB1dHNcIjogW10sIFwibmFtZVwiOiBcImxhdGVzdFJvdW5kRGF0YVwiLCBcIm91dHB1dHNcIjogW3sgXCJpbnRlcm5hbFR5cGVcIjogXCJ1aW50ODBcIiwgXCJuYW1lXCI6IFwicm91bmRJZFwiLCBcInR5cGVcIjogXCJ1aW50ODBcIiB9LCB7IFwiaW50ZXJuYWxUeXBlXCI6IFwiaW50MjU2XCIsIFwibmFtZVwiOiBcImFuc3dlclwiLCBcInR5cGVcIjogXCJpbnQyNTZcIiB9LCB7IFwiaW50ZXJuYWxUeXBlXCI6IFwidWludDI1NlwiLCBcIm5hbWVcIjogXCJzdGFydGVkQXRcIiwgXCJ0eXBlXCI6IFwidWludDI1NlwiIH0sIHsgXCJpbnRlcm5hbFR5cGVcIjogXCJ1aW50MjU2XCIsIFwibmFtZVwiOiBcInVwZGF0ZWRBdFwiLCBcInR5cGVcIjogXCJ1aW50MjU2XCIgfSwgeyBcImludGVybmFsVHlwZVwiOiBcInVpbnQ4MFwiLCBcIm5hbWVcIjogXCJhbnN3ZXJlZEluUm91bmRcIiwgXCJ0eXBlXCI6IFwidWludDgwXCIgfV0sIFwic3RhdGVNdXRhYmlsaXR5XCI6IFwidmlld1wiLCBcInR5cGVcIjogXCJmdW5jdGlvblwiIH0sIHsgXCJpbnB1dHNcIjogW10sIFwibmFtZVwiOiBcInZlcnNpb25cIiwgXCJvdXRwdXRzXCI6IFt7IFwiaW50ZXJuYWxUeXBlXCI6IFwidWludDI1NlwiLCBcIm5hbWVcIjogXCJcIiwgXCJ0eXBlXCI6IFwidWludDI1NlwiIH1dLCBcInN0YXRlTXV0YWJpbGl0eVwiOiBcInZpZXdcIiwgXCJ0eXBlXCI6IFwiZnVuY3Rpb25cIiB9XTtcbiAgdmFyIHByaWNlRmVlZCA9IG5ldyB3ZWIzLmV0aC5Db250cmFjdChhZ2dyZWdhdG9yVjNJbnRlcmZhY2VBQkksIGFkZHIpO1xuXG4gIHByaWNlRmVlZC5tZXRob2RzLmxhdGVzdFJvdW5kRGF0YSgpLmNhbGwoKS50aGVuKGZ1bmN0aW9uIChyb3VuZERhdGEpIHtcbiAgICBjb25zb2xlLmxvZyhcIkxhdGVzdCBSb3VuZCBEYXRhXCIsIHJvdW5kRGF0YSk7XG4gICAgcmV0dXJuIHJvdW5kRGF0YTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IGluZnVyYUxpbmtLb3ZhbiwgZXRoZXJldW1QcmljZSB9OyJdfQ==
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsicmVxdWlyZSIsImNvbmZpZyIsImluZnVyYUxpbmtLb3ZhbiIsInByb2Nlc3MiLCJlbnYiLCJldGhlcmV1bVByaWNlIiwid2ViMyIsImFnZ3JlZ2F0b3JWM0ludGVyZmFjZUFCSSIsInByaWNlRmVlZCIsImV0aCIsIkNvbnRyYWN0IiwiYWRkciIsIm1ldGhvZHMiLCJsYXRlc3RSb3VuZERhdGEiLCJjYWxsIiwidGhlbiIsInJvdW5kRGF0YSIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7Ozs7O0FBQ0FBLGtCQUFrQkMsTUFBbEI7QUFDQSxJQUFJQyxrQkFBa0JDLFFBQVFDLEdBQVIsQ0FBWUYsZUFBbEM7O0FBRUEsU0FBU0csYUFBVCxHQUF5Qjs7QUFFdkIsTUFBSUMsT0FBTyxrQkFBU0osZUFBVCxDQUFYO0FBQ0EsTUFBSUssMkJBQTJCLENBQUMsRUFBRSxVQUFVLEVBQVosRUFBZ0IsUUFBUSxVQUF4QixFQUFvQyxXQUFXLENBQUMsRUFBRSxnQkFBZ0IsT0FBbEIsRUFBMkIsUUFBUSxFQUFuQyxFQUF1QyxRQUFRLE9BQS9DLEVBQUQsQ0FBL0MsRUFBMkcsbUJBQW1CLE1BQTlILEVBQXNJLFFBQVEsVUFBOUksRUFBRCxFQUE2SixFQUFFLFVBQVUsRUFBWixFQUFnQixRQUFRLGFBQXhCLEVBQXVDLFdBQVcsQ0FBQyxFQUFFLGdCQUFnQixRQUFsQixFQUE0QixRQUFRLEVBQXBDLEVBQXdDLFFBQVEsUUFBaEQsRUFBRCxDQUFsRCxFQUFnSCxtQkFBbUIsTUFBbkksRUFBMkksUUFBUSxVQUFuSixFQUE3SixFQUE4VCxFQUFFLFVBQVUsQ0FBQyxFQUFFLGdCQUFnQixRQUFsQixFQUE0QixRQUFRLFVBQXBDLEVBQWdELFFBQVEsUUFBeEQsRUFBRCxDQUFaLEVBQWtGLFFBQVEsY0FBMUYsRUFBMEcsV0FBVyxDQUFDLEVBQUUsZ0JBQWdCLFFBQWxCLEVBQTRCLFFBQVEsU0FBcEMsRUFBK0MsUUFBUSxRQUF2RCxFQUFELEVBQW9FLEVBQUUsZ0JBQWdCLFFBQWxCLEVBQTRCLFFBQVEsUUFBcEMsRUFBOEMsUUFBUSxRQUF0RCxFQUFwRSxFQUFzSSxFQUFFLGdCQUFnQixTQUFsQixFQUE2QixRQUFRLFdBQXJDLEVBQWtELFFBQVEsU0FBMUQsRUFBdEksRUFBNk0sRUFBRSxnQkFBZ0IsU0FBbEIsRUFBNkIsUUFBUSxXQUFyQyxFQUFrRCxRQUFRLFNBQTFELEVBQTdNLEVBQW9SLEVBQUUsZ0JBQWdCLFFBQWxCLEVBQTRCLFFBQVEsaUJBQXBDLEVBQXVELFFBQVEsUUFBL0QsRUFBcFIsQ0FBckgsRUFBcWQsbUJBQW1CLE1BQXhlLEVBQWdmLFFBQVEsVUFBeGYsRUFBOVQsRUFBbzBCLEVBQUUsVUFBVSxFQUFaLEVBQWdCLFFBQVEsaUJBQXhCLEVBQTJDLFdBQVcsQ0FBQyxFQUFFLGdCQUFnQixRQUFsQixFQUE0QixRQUFRLFNBQXBDLEVBQStDLFFBQVEsUUFBdkQsRUFBRCxFQUFvRSxFQUFFLGdCQUFnQixRQUFsQixFQUE0QixRQUFRLFFBQXBDLEVBQThDLFFBQVEsUUFBdEQsRUFBcEUsRUFBc0ksRUFBRSxnQkFBZ0IsU0FBbEIsRUFBNkIsUUFBUSxXQUFyQyxFQUFrRCxRQUFRLFNBQTFELEVBQXRJLEVBQTZNLEVBQUUsZ0JBQWdCLFNBQWxCLEVBQTZCLFFBQVEsV0FBckMsRUFBa0QsUUFBUSxTQUExRCxFQUE3TSxFQUFvUixFQUFFLGdCQUFnQixRQUFsQixFQUE0QixRQUFRLGlCQUFwQyxFQUF1RCxRQUFRLFFBQS9ELEVBQXBSLENBQXRELEVBQXNaLG1CQUFtQixNQUF6YSxFQUFpYixRQUFRLFVBQXpiLEVBQXAwQixFQUEyd0MsRUFBRSxVQUFVLEVBQVosRUFBZ0IsUUFBUSxTQUF4QixFQUFtQyxXQUFXLENBQUMsRUFBRSxnQkFBZ0IsU0FBbEIsRUFBNkIsUUFBUSxFQUFyQyxFQUF5QyxRQUFRLFNBQWpELEVBQUQsQ0FBOUMsRUFBOEcsbUJBQW1CLE1BQWpJLEVBQXlJLFFBQVEsVUFBakosRUFBM3dDLENBQS9CO0FBQ0EsTUFBSUMsWUFBWSxJQUFJRixLQUFLRyxHQUFMLENBQVNDLFFBQWIsQ0FBc0JILHdCQUF0QixFQUFnREksSUFBaEQsQ0FBaEI7O0FBRUFILFlBQVVJLE9BQVYsQ0FBa0JDLGVBQWxCLEdBQW9DQyxJQUFwQyxHQUEyQ0MsSUFBM0MsQ0FBZ0QsVUFBVUMsU0FBVixFQUFxQjtBQUNuRUMsWUFBUUMsR0FBUixDQUFZLG1CQUFaLEVBQWlDRixTQUFqQztBQUNBLFdBQU9BLFNBQVA7QUFDRCxHQUhEO0FBSUQ7O1FBRVFkLGUsR0FBQUEsZTtRQUFpQkcsYSxHQUFBQSxhIiwiZmlsZSI6InVua25vd24ifQ==