'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

var _ticker = require('./ticker');

var _ticker2 = _interopRequireDefault(_ticker);

var _deployedTo = require('../ethereum/deployedTo');

var _deployedTo2 = _interopRequireDefault(_deployedTo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsuranceMVPB/pages/index.js?entry';


var InsurancePoolIndex = function (_Component) {
  (0, _inherits3.default)(InsurancePoolIndex, _Component);

  function InsurancePoolIndex() {
    (0, _classCallCheck3.default)(this, InsurancePoolIndex);

    return (0, _possibleConstructorReturn3.default)(this, (InsurancePoolIndex.__proto__ || (0, _getPrototypeOf2.default)(InsurancePoolIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(InsurancePoolIndex, [{
    key: 'renderInsurancePools',
    value: function renderInsurancePools() {
      var items = this.props.insurancePools.map(function (address) {
        return {
          header: address,
          description: _react2.default.createElement('div', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 25
            }
          }, _react2.default.createElement('i', { 'class': 'hand point right outline icon', __source: {
              fileName: _jsxFileName,
              lineNumber: 26
            }
          }), _react2.default.createElement(_routes.Link, { route: '/insurancepools/' + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 27
            }
          }, _react2.default.createElement('a', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 28
            }
          }, _react2.default.createElement('b', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 28
            }
          }, _react2.default.createElement('mark', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 28
            }
          }, 'View this Pool')))), '\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0', _react2.default.createElement('i', { 'class': 'ethereum icon', __source: {
              fileName: _jsxFileName,
              lineNumber: 31
            }
          }), _react2.default.createElement(_routes.Link, { route: 'https://rinkeby.etherscan.io/address/' + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 32
            }
          }, _react2.default.createElement('a', { target: '_blank', __source: {
              fileName: _jsxFileName,
              lineNumber: 33
            }
          }, 'View in Etherscan'))),
          fluid: true
        };
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 41
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }, _react2.default.createElement(_ticker2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      }), _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 50
        }
      }, _react2.default.createElement('h7', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 51
        }
      }, 'We are not rasing any money, we are only accepting donations.', _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 52
        }
      }), ' For more info email \xA0', _react2.default.createElement('a', { href: 'mailto:NG_YAO_MIN01.PT@ICHAT.SP.EDU.SG', __source: {
          fileName: _jsxFileName,
          lineNumber: 53
        }
      }, _react2.default.createElement('u', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 54
        }
      }, 'givemeyourmoney@cheatyourmoney.io')), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 56
        }
      }), 'You can also see our latest smart contract', _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }), _react2.default.createElement(_routes.Link, { route: 'https://rinkeby.etherscan.io/address/' + _deployedTo2.default, __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      }, _react2.default.createElement('a', { target: '_blank', __source: {
          fileName: _jsxFileName,
          lineNumber: 61
        }
      }, '\'$', _deployedTo2.default, '\''))), _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 67
        }
      }, 'Open Safety Pins Pools'), _react2.default.createElement(_routes.Link, { route: '/insurancepools/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 69
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 70
        }
      }, _react2.default.createElement(_semanticUiReact.Button, {
        floated: 'right',
        content: 'Create New Pool',
        icon: 'add circle' // the icon name is in document, be exact
        , primary: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 71
        }
      }))), this.renderInsurancePools()));
    }
  }], [{
    key: 'getInitialProps',

    // creating a instance of class to get access to
    // static asign the function not to instance of the class but to class itself

    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var insurancePools;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _factory2.default.methods.getDeployedInsurancePools().call();

              case 2:
                insurancePools = _context.sent;
                return _context.abrupt('return', { insurancePools: insurancePools });

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return InsurancePoolIndex;
}(_react.Component);

exports.default = InsurancePoolIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSW5zdXJhbmNlUG9vbEluZGV4IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJJbnN1cmFuY2VQb29scyIsIml0ZW1zIiwicHJvcHMiLCJpbnN1cmFuY2VQb29scyIsIm1hcCIsImFkZHJlc3MiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJvdXRlIiwidGFyZ2V0IiwiZmx1aWQiLCJHcm91cCIsInJlbmRlciIsImhyZWYiLCJmbG9hdGVkIiwiY29udGVudCIsImljb24iLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIm1ldGhvZHMiLCJnZXREZXBsb3llZEluc3VyYW5jZVBvb2xzIiwiY2FsbCIsInNlbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7OztBQVBBLElBQUlBLGVBQWUsNkRBQW5COzs7QUFTQSxJQUFJQyxxQkFBcUIsVUFBVUMsVUFBVixFQUFzQjtBQUM3QywwQkFBVUQsa0JBQVYsRUFBOEJDLFVBQTlCOztBQUVBLFdBQVNELGtCQUFULEdBQThCO0FBQzVCLGtDQUFnQixJQUFoQixFQUFzQkEsa0JBQXRCOztBQUVBLFdBQU8seUNBQTJCLElBQTNCLEVBQWlDLENBQUNBLG1CQUFtQkUsU0FBbkIsSUFBZ0MsOEJBQXVCRixrQkFBdkIsQ0FBakMsRUFBNkVHLEtBQTdFLENBQW1GLElB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N0IsaUNBQWlCd0IsU0FBU00sSUFBMUI7QUFDQSx1QkFBT04sU0FBU08sTUFBVCxDQUFnQixRQUFoQixFQUEwQixFQUFFL0IsZ0JBQWdCQSxjQUFsQixFQUExQixDQUFQOztBQUVGLG1CQUFLLENBQUw7QUFDQSxtQkFBSyxLQUFMO0FBQ0UsdUJBQU93QixTQUFTUSxJQUFULEVBQVA7QUFYSjtBQWFEO0FBQ0YsU0FoQk0sRUFnQkpYLE9BaEJJLEVBZ0JLLElBaEJMLENBQVA7QUFpQkQsT0FuQjBDLENBQWhDLENBQVg7O0FBcUJBLGVBQVNZLGVBQVQsR0FBMkI7QUFDekIsZUFBT2QsS0FBSzFCLEtBQUwsQ0FBVyxJQUFYLEVBQWlCQyxTQUFqQixDQUFQO0FBQ0Q7O0FBRUQsYUFBT3VDLGVBQVA7QUFDRCxLQTNCTTtBQU5KLEdBQUQsQ0E5Tko7O0FBa1FBLFNBQU8zQyxrQkFBUDtBQUNELENBNVF3QixrQkFBekI7O2tCQThRZUEsa0IiLCJmaWxlIjoidW5rbm93biIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gJ2JhYmVsLXJ1bnRpbWUvcmVnZW5lcmF0b3InO1xuaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yJztcbmltcG9ydCBfT2JqZWN0JGdldFByb3RvdHlwZU9mIGZyb20gJ2JhYmVsLXJ1bnRpbWUvY29yZS1qcy9vYmplY3QvZ2V0LXByb3RvdHlwZS1vZic7XG5pbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjayc7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcyc7XG5pbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nO1xuaW1wb3J0IF9pbmhlcml0cyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnO1xudmFyIF9qc3hGaWxlTmFtZSA9ICcvVXNlcnMveWFvbWluL2Rpc3RyaWJ1dGVkSW5zdXJhbmNlTVZQQi9wYWdlcy9pbmRleC5qcz9lbnRyeSc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IGZhY3RvcnkgZnJvbSAnLi4vZXRoZXJldW0vZmFjdG9yeSc7XG5pbXBvcnQgeyBDYXJkLCBCdXR0b24gfSBmcm9tICdzZW1hbnRpYy11aS1yZWFjdCc7XG5pbXBvcnQgTGF5b3V0IGZyb20gJy4uL2NvbXBvbmVudHMvTGF5b3V0JztcbmltcG9ydCB7IExpbmsgfSBmcm9tICcuLi9yb3V0ZXMnO1xuaW1wb3J0IE1vdmVTdHVmZkFyb3VuZCBmcm9tICcuL3RpY2tlcic7XG5pbXBvcnQgZGVwbG95ZWRUbyBmcm9tICcuLi9ldGhlcmV1bS9kZXBsb3llZFRvJztcblxudmFyIEluc3VyYW5jZVBvb2xJbmRleCA9IGZ1bmN0aW9uIChfQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhJbnN1cmFuY2VQb29sSW5kZXgsIF9Db21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEluc3VyYW5jZVBvb2xJbmRleCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW5zdXJhbmNlUG9vbEluZGV4KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoSW5zdXJhbmNlUG9vbEluZGV4Ll9fcHJvdG9fXyB8fCBfT2JqZWN0JGdldFByb3RvdHlwZU9mKEluc3VyYW5jZVBvb2xJbmRleCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEluc3VyYW5jZVBvb2xJbmRleCwgW3tcbiAgICBrZXk6ICdyZW5kZXJJbnN1cmFuY2VQb29scycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlckluc3VyYW5jZVBvb2xzKCkge1xuICAgICAgdmFyIGl0ZW1zID0gdGhpcy5wcm9wcy5pbnN1cmFuY2VQb29scy5tYXAoZnVuY3Rpb24gKGFkZHJlc3MpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBoZWFkZXI6IGFkZHJlc3MsXG4gICAgICAgICAgZGVzY3JpcHRpb246IFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDI1XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KCdpJywgeyAnY2xhc3MnOiAnaGFuZCBwb2ludCByaWdodCBvdXRsaW5lIGljb24nLCBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogMjZcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBMaW5rLFxuICAgICAgICAgICAgICB7IHJvdXRlOiAnL2luc3VyYW5jZXBvb2xzLycgKyBhZGRyZXNzLCBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDI3XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICdhJyxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAyOFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAgICdiJyxcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDI4XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAgICAgICAnbWFyaycsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDI4XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAnVmlldyB0aGlzIFBvb2wnXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgJ1xceEEwXFx4QTBcXHhBMFxceEEwXFx4QTBcXHhBMFxceEEwXFx4QTBcXHhBMFxceEEwJyxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2knLCB7ICdjbGFzcyc6ICdldGhlcmV1bSBpY29uJywgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDMxXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgTGluayxcbiAgICAgICAgICAgICAgeyByb3V0ZTogJ2h0dHBzOi8vcmlua2VieS5ldGhlcnNjYW4uaW8vYWRkcmVzcy8nICsgYWRkcmVzcywgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAzMlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgICAnYScsXG4gICAgICAgICAgICAgICAgeyB0YXJnZXQ6ICdfYmxhbmsnLCBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiAzM1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgJ1ZpZXcgaW4gRXRoZXJzY2FuJ1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKSxcbiAgICAgICAgICBmbHVpZDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KENhcmQuR3JvdXAsIHsgaXRlbXM6IGl0ZW1zLCBfX3NvdXJjZToge1xuICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgbGluZU51bWJlcjogNDFcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIExheW91dCxcbiAgICAgICAge1xuICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgbGluZU51bWJlcjogNDhcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoTW92ZVN0dWZmQXJvdW5kLCB7XG4gICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICBsaW5lTnVtYmVyOiA0OVxuICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgJ2RpdicsXG4gICAgICAgICAge1xuICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgbGluZU51bWJlcjogNTBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnaDcnLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogNTFcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdXZSBhcmUgbm90IHJhc2luZyBhbnkgbW9uZXksIHdlIGFyZSBvbmx5IGFjY2VwdGluZyBkb25hdGlvbnMuJyxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2JyJywge1xuICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogNTJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAnIEZvciBtb3JlIGluZm8gZW1haWwgXFx4QTAnLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2EnLFxuICAgICAgICAgICAgICB7IGhyZWY6ICdtYWlsdG86TkdfWUFPX01JTjAxLlBUQElDSEFULlNQLkVEVS5TRycsIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNTNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ3UnLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDU0XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAnZ2l2ZW1leW91cm1vbmV5QGNoZWF0eW91cm1vbmV5LmlvJ1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnYnInLCB7XG4gICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA1NlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICdZb3UgY2FuIGFsc28gc2VlIG91ciBsYXRlc3Qgc21hcnQgY29udHJhY3QnLFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudCgnYnInLCB7XG4gICAgICAgICAgICAgIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA1OVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgIExpbmssXG4gICAgICAgICAgICAgIHsgcm91dGU6ICdodHRwczovL3JpbmtlYnkuZXRoZXJzY2FuLmlvL2FkZHJlc3MvJyArIGRlcGxveWVkVG8sIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgICBmaWxlTmFtZTogX2pzeEZpbGVOYW1lLFxuICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNjBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAgICAgJ2EnLFxuICAgICAgICAgICAgICAgIHsgdGFyZ2V0OiAnX2JsYW5rJywgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlcjogNjFcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICdcXCckJyxcbiAgICAgICAgICAgICAgICBkZXBsb3llZFRvLFxuICAgICAgICAgICAgICAgICdcXCcnXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgICApLFxuICAgICAgICAgIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnaDMnLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgbGluZU51bWJlcjogNjdcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdPcGVuIFNhZmV0eSBQaW5zIFBvb2xzJ1xuICAgICAgICAgICksXG4gICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgIExpbmssXG4gICAgICAgICAgICB7IHJvdXRlOiAnL2luc3VyYW5jZXBvb2xzL25ldycsIF9fc291cmNlOiB7XG4gICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA2OVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgJ2EnLFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgX19zb3VyY2U6IHtcbiAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBfanN4RmlsZU5hbWUsXG4gICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyOiA3MFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgUmVhY3QuY3JlYXRlRWxlbWVudChCdXR0b24sIHtcbiAgICAgICAgICAgICAgICBmbG9hdGVkOiAncmlnaHQnLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6ICdDcmVhdGUgTmV3IFBvb2wnLFxuICAgICAgICAgICAgICAgIGljb246ICdhZGQgY2lyY2xlJyAvLyB0aGUgaWNvbiBuYW1lIGlzIGluIGRvY3VtZW50LCBiZSBleGFjdFxuICAgICAgICAgICAgICAgICwgcHJpbWFyeTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBfX3NvdXJjZToge1xuICAgICAgICAgICAgICAgICAgZmlsZU5hbWU6IF9qc3hGaWxlTmFtZSxcbiAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXI6IDcxXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgICksXG4gICAgICAgICAgdGhpcy5yZW5kZXJJbnN1cmFuY2VQb29scygpXG4gICAgICAgIClcbiAgICAgICk7XG4gICAgfVxuICB9XSwgW3tcbiAgICBrZXk6ICdnZXRJbml0aWFsUHJvcHMnLFxuXG4gICAgLy8gY3JlYXRpbmcgYSBpbnN0YW5jZSBvZiBjbGFzcyB0byBnZXQgYWNjZXNzIHRvXG4gICAgLy8gc3RhdGljIGFzaWduIHRoZSBmdW5jdGlvbiBub3QgdG8gaW5zdGFuY2Ugb2YgdGhlIGNsYXNzIGJ1dCB0byBjbGFzcyBpdHNlbGZcblxuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7XG4gICAgICAgIHZhciBpbnN1cmFuY2VQb29scztcbiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkge1xuICAgICAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7XG4gICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFjdG9yeS5tZXRob2RzLmdldERlcGxveWVkSW5zdXJhbmNlUG9vbHMoKS5jYWxsKCk7XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGluc3VyYW5jZVBvb2xzID0gX2NvbnRleHQuc2VudDtcbiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCdyZXR1cm4nLCB7IGluc3VyYW5jZVBvb2xzOiBpbnN1cmFuY2VQb29scyB9KTtcblxuICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpO1xuICAgICAgfSkpO1xuXG4gICAgICBmdW5jdGlvbiBnZXRJbml0aWFsUHJvcHMoKSB7XG4gICAgICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRJbml0aWFsUHJvcHM7XG4gICAgfSgpXG4gIH1dKTtcblxuICByZXR1cm4gSW5zdXJhbmNlUG9vbEluZGV4O1xufShDb21wb25lbnQpO1xuXG5leHBvcnQgZGVmYXVsdCBJbnN1cmFuY2VQb29sSW5kZXg7Il19
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSW5zdXJhbmNlUG9vbEluZGV4IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJJbnN1cmFuY2VQb29scyIsIml0ZW1zIiwicHJvcHMiLCJpbnN1cmFuY2VQb29scyIsIm1hcCIsImFkZHJlc3MiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJvdXRlIiwidGFyZ2V0IiwiZmx1aWQiLCJHcm91cCIsInJlbmRlciIsImhyZWYiLCJmbG9hdGVkIiwiY29udGVudCIsImljb24iLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIm1ldGhvZHMiLCJnZXREZXBsb3llZEluc3VyYW5jZVBvb2xzIiwiY2FsbCIsInNlbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7OztBQVBBLElBQUlBLGVBQWUsNkRBQW5COzs7QUFTQSxJQUFJQyxxQkFBcUIsVUFBVUMsVUFBVixFQUFzQjtBQUM3QywwQkFBVUQsa0JBQVYsRUFBOEJDLFVBQTlCOztBQUVBLFdBQVNELGtCQUFULEdBQThCO0FBQzVCLGtDQUFnQixJQUFoQixFQUFzQkEsa0JBQXRCOztBQUVBLFdBQU8seUNBQTJCLElBQTNCLEVBQWlDLENBQUNBLG1CQUFtQkUsU0FBbkIsSUFBZ0MsOEJBQXVCRixrQkFBdkIsQ0FBakMsRUFBNkVHLEtBQTdFLENBQW1GLElB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