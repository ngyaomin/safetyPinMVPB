'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

var _ticker = require('./ticker');

var _ticker2 = _interopRequireDefault(_ticker);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsurance/pages/index.js?entry';


var InsurancePoolIndex = function (_Component) {
  (0, _inherits3.default)(InsurancePoolIndex, _Component);

  function InsurancePoolIndex() {
    (0, _classCallCheck3.default)(this, InsurancePoolIndex);

    return (0, _possibleConstructorReturn3.default)(this, (InsurancePoolIndex.__proto__ || (0, _getPrototypeOf2.default)(InsurancePoolIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(InsurancePoolIndex, [{
    key: 'renderInsurancePools',
    value: function renderInsurancePools() {
      var items = this.props.insurancePools.map(function (address) {
        return {
          header: address,
          description: _react2.default.createElement('div', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 24
            }
          }, _react2.default.createElement('i', { 'class': 'hand point right outline icon', __source: {
              fileName: _jsxFileName,
              lineNumber: 25
            }
          }), _react2.default.createElement(_routes.Link, { route: '/insurancepools/' + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 26
            }
          }, _react2.default.createElement('a', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 27
            }
          }, _react2.default.createElement('b', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 27
            }
          }, _react2.default.createElement('mark', {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 27
            }
          }, 'View this Pool')))), '\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0\xA0', _react2.default.createElement('i', { 'class': 'ethereum icon', __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          }), _react2.default.createElement(_routes.Link, { route: 'https://rinkeby.etherscan.io/address/' + address, __source: {
              fileName: _jsxFileName,
              lineNumber: 31
            }
          }, _react2.default.createElement('a', { target: '_blank', __source: {
              fileName: _jsxFileName,
              lineNumber: 32
            }
          }, 'View in Etherscan'))),
          fluid: true
        };
      });

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 40
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 47
        }
      }, _react2.default.createElement(_ticker2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }), _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      }, _react2.default.createElement('h7', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 50
        }
      }, 'We are not rasing any money, we are only accepting donations.', _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 51
        }
      }), ' For more info email \xA0', _react2.default.createElement('a', { href: 'mailto:NG_YAO_MIN01.PT@ICHAT.SP.EDU.SG', __source: {
          fileName: _jsxFileName,
          lineNumber: 52
        }
      }, _react2.default.createElement('u', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 53
        }
      }, 'givemeyourmoney@cheatyourmoney.io')), _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 55
        }
      }), 'You can also see our latest smart contract', _react2.default.createElement('br', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }), _react2.default.createElement('a', { target: '_blank', href: 'https://rinkeby.etherscan.io/address/0xb237d488Da554ffadA191038c31A8d585d2aa1F1', __source: {
          fileName: _jsxFileName,
          lineNumber: 58
        }
      }, '\'0xb237d488Da554ffadA191038c31A8d585d2aa1F1\'')), _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 62
        }
      }, 'Open Safety Pins Pools'), _react2.default.createElement(_routes.Link, { route: '/insurancepools/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 64
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 65
        }
      }, _react2.default.createElement(_semanticUiReact.Button, {
        floated: 'right',
        content: 'Create New Pool',
        icon: 'add circle' // the icon name is in document, be exact
        , primary: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 66
        }
      }))), this.renderInsurancePools()));
    }
  }], [{
    key: 'getInitialProps',

    // creating a instance of class to get access to
    // static asign the function not to instance of the class but to class itself

    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var insurancePools;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _factory2.default.methods.getDeployedInsurancePools().call();

              case 2:
                insurancePools = _context.sent;
                return _context.abrupt('return', { insurancePools: insurancePools });

              case 4:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps() {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return InsurancePoolIndex;
}(_react.Component);

exports.default = InsurancePoolIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSW5zdXJhbmNlUG9vbEluZGV4IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJJbnN1cmFuY2VQb29scyIsIml0ZW1zIiwicHJvcHMiLCJpbnN1cmFuY2VQb29scyIsIm1hcCIsImFkZHJlc3MiLCJoZWFkZXIiLCJkZXNjcmlwdGlvbiIsImNyZWF0ZUVsZW1lbnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJvdXRlIiwidGFyZ2V0IiwiZmx1aWQiLCJHcm91cCIsInJlbmRlciIsImhyZWYiLCJmbG9hdGVkIiwiY29udGVudCIsImljb24iLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsIm1ldGhvZHMiLCJnZXREZXBsb3llZEluc3VyYW5jZVBvb2xzIiwiY2FsbCIsInNlbnQiLCJhYnJ1cHQiLCJzdG9wIiwiZ2V0SW5pdGlhbFByb3BzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOztBQUNBOzs7Ozs7QUFOQSxJQUFJQSxlQUFlLHlEQUFuQjs7O0FBUUEsSUFBSUMscUJBQXFCLFVBQVVDLFVBQVYsRUFBc0I7QUFDN0MsMEJBQVVELGtCQUFWLEVBQThCQyxVQUE5Qjs7QUFFQSxXQUFTRCxrQkFBVCxHQUE4QjtBQUM1QixrQ0FBZ0IsSUFBaEIsRUFBc0JBLGtCQUF0Qjs7QUFFQSxXQUFPLHlDQUEyQixJQUEzQixFQUFpQyxDQUFDQSxtQkFBbUJFLFNBQW5CLElBQWdDLDhCQUF1QkYsa0JBQXZCLENBQWpDLEVBQTZFRyxLQUE3RSxDQUFtRixJQUFuRixFQUF5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