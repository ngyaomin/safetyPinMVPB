'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _insurancePool = require('../../ethereum/insurancePool');

var _insurancePool2 = _interopRequireDefault(_insurancePool);

var _semanticUiReact = require('semantic-ui-react');

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _FundForm = require('../../components/FundForm');

var _FundForm2 = _interopRequireDefault(_FundForm);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsuranceMVPB/pages/insurancepools/show.js?entry';


var InsurancePoolShow = function (_Component) {
  (0, _inherits3.default)(InsurancePoolShow, _Component);

  function InsurancePoolShow() {
    (0, _classCallCheck3.default)(this, InsurancePoolShow);

    return (0, _possibleConstructorReturn3.default)(this, (InsurancePoolShow.__proto__ || (0, _getPrototypeOf2.default)(InsurancePoolShow)).apply(this, arguments));
  }

  (0, _createClass3.default)(InsurancePoolShow, [{
    key: 'renderCards',
    value: function renderCards() {
      var _props = this.props,
          balance = _props.balance,
          manager = _props.manager,
          minimumPremium = _props.minimumPremium,
          documentHash = _props.documentHash,
          claimsCount = _props.claimsCount,
          validatorsCount = _props.validatorsCount;

      var items = [
      //`https://rinkeby.etherscan.io/address/${address}`
      {
        header: manager,
        meta: 'Address of manager',
        href: 'https://rinkeby.etherscan.io/address/' + manager,
        description: 'Manager create this pool and can create claims on behalf of',
        style: { overflowWrap: 'break-word' },
        target: "_blank"
      }, {
        header: minimumPremium,
        meta: 'Minimum Premium in weis',
        description: 'To ensure peace of mind you must contribute at least this much wei, also to become validator'
      }, {
        header: claimsCount,
        meta: 'Number of Claims',
        description: 'Number of claims so far on this safety pin pool. Claims must be validated by validators'
      }, {
        header: validatorsCount,
        meta: 'Number of validators',
        description: 'Number of addresses that funded this pool and can act as validators'
      }, {
        header: _web2.default.utils.fromWei(balance, 'ether'),
        meta: 'Safety Pin Pool Balance(ether)',
        description: 'How much fund this pool has left'
      }, {
        header: documentHash,
        meta: 'Hash of IPFS of Document',
        description: 'Click to View/Download',
        href: 'https://ipfs.infura.io/ipfs/' + documentHash,
        style: { overflowWrap: 'break-word' },
        target: "_blank"
      }];

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 78
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 83
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 84
        }
      }, 'Pool Details Show'), _react2.default.createElement(_semanticUiReact.Grid, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 85
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 86
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
          fileName: _jsxFileName,
          lineNumber: 87
        }
      }, this.renderCards(), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        }
      }, '\xA0'), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 92
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 93
        }
      }, _react2.default.createElement(_routes.Link, { route: '/insurancepools/' + this.props.address + '/claims', __source: {
          fileName: _jsxFileName,
          lineNumber: 94
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 95
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 96
        }
      }, 'View Claims')))))), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
          fileName: _jsxFileName,
          lineNumber: 102
        }
      }, _react2.default.createElement(_FundForm2.default, { address: this.props.address, __source: {
          fileName: _jsxFileName,
          lineNumber: 103
        }
      }))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 107
        }
      }, '\xA0')));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var insurancePool, detail;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                insurancePool = (0, _insurancePool2.default)(props.query.address);
                _context.next = 3;
                return insurancePool.methods.getDetail().call();

              case 3:
                detail = _context.sent;
                return _context.abrupt('return', {
                  address: props.query.address,
                  minimumPremium: detail[0],
                  balance: detail[1],
                  claimsCount: detail[2],
                  validatorsCount: detail[3],
                  manager: detail[4],
                  documentHash: detail[5]
                });

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return InsurancePoolShow;
}(_react.Component);

exports.default = InsurancePoolShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSW5zdXJhbmNlUG9vbFNob3ciLCJfQ29tcG9uZW50IiwiX19wcm90b19fIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlckNhcmRzIiwiX3Byb3BzIiwicHJvcHMiLCJiYWxhbmNlIiwibWFuYWdlciIsIm1pbmltdW1QcmVtaXVtIiwiZG9jdW1lbnRIYXNoIiwiY2xhaW1zQ291bnQiLCJ2YWxpZGF0b3JzQ291bnQiLCJpdGVtcyIsImhlYWRlciIsIm1ldGEiLCJocmVmIiwiZGVzY3JpcHRpb24iLCJzdHlsZSIsIm92ZXJmbG93V3JhcCIsInRhcmdldCIsInV0aWxzIiwiZnJvbVdlaSIsImNyZWF0ZUVsZW1lbnQiLCJHcm91cCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyIiwiUm93IiwiQ29sdW1uIiwid2lkdGgiLCJyb3V0ZSIsImFkZHJlc3MiLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwiaW5zdXJhbmNlUG9vbCIsImRldGFpbCIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJxdWVyeSIsIm1ldGhvZHMiLCJnZXREZXRhaWwiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFQQSxJQUFJQSxlQUFlLDJFQUFuQjs7O0FBU0EsSUFBSUMsb0JBQW9CLFVBQVVDLFVBQVYsRUFBc0I7QUFDNUMsMEJBQVVELGlCQUFWLEVBQTZCQyxVQUE3Qjs7QUFFQSxXQUFTRCxpQkFBVCxHQUE2QjtBQUMzQixrQ0FBZ0Is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