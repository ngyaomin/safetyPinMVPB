'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _insurancePool = require('../../ethereum/insurancePool');

var _insurancePool2 = _interopRequireDefault(_insurancePool);

var _semanticUiReact = require('semantic-ui-react');

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _FundForm = require('../../components/FundForm');

var _FundForm2 = _interopRequireDefault(_FundForm);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsuranceMVPB/pages/insurancepools/show.js?entry';


var InsurancePoolShow = function (_Component) {
  (0, _inherits3.default)(InsurancePoolShow, _Component);

  function InsurancePoolShow() {
    (0, _classCallCheck3.default)(this, InsurancePoolShow);

    return (0, _possibleConstructorReturn3.default)(this, (InsurancePoolShow.__proto__ || (0, _getPrototypeOf2.default)(InsurancePoolShow)).apply(this, arguments));
  }

  (0, _createClass3.default)(InsurancePoolShow, [{
    key: 'renderCards',
    value: function renderCards() {
      var _props = this.props,
          balance = _props.balance,
          manager = _props.manager,
          minimumPremium = _props.minimumPremium,
          documentHash = _props.documentHash,
          claimsCount = _props.claimsCount,
          validatorsCount = _props.validatorsCount;

      var items = [
      //`https://rinkeby.etherscan.io/address/${address}`
      {
        header: manager,
        meta: 'Address of manager',
        href: 'https://rinkeby.etherscan.io/address/' + manager,
        description: 'Manager create this pool and can create claims on behalf of',
        style: { overflowWrap: 'break-word' },
        target: "_blank"
      }, {
        header: minimumPremium,
        meta: 'Minimum Premium in weis',
        description: 'To ensure peace of mind you must contribute at least this much wei, also to become validator. This is ' + _web2.default.utils.fromWei(minimumPremium, 'ether') + ' in ethers'
      }, {
        header: claimsCount,
        meta: 'Number of Claims',
        description: 'Number of claims so far on this safety pin pool. Claims must be validated by validators'
      }, {
        header: validatorsCount,
        meta: 'Number of validators',
        description: 'Number of addresses that funded this pool and can act as validators'
      }, {
        header: _web2.default.utils.fromWei(balance, 'ether'),
        meta: 'Safety Pin Pool Balance(ether)',
        description: 'How much fund this pool has left'
      }, {
        header: documentHash,
        meta: 'Hash of IPFS of Document',
        description: 'Click to View/Download',
        href: 'https://ipfs.infura.io/ipfs/' + documentHash,
        style: { overflowWrap: 'break-word' },
        target: "_blank"
      }];

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 78
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 83
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 84
        }
      }, 'Pool Details Show'), _react2.default.createElement(_semanticUiReact.Grid, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 85
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 86
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
          fileName: _jsxFileName,
          lineNumber: 87
        }
      }, this.renderCards(), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        }
      }, '\xA0'), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 92
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 93
        }
      }, _react2.default.createElement(_routes.Link, { route: '/insurancepools/' + this.props.address + '/claims', __source: {
          fileName: _jsxFileName,
          lineNumber: 94
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 95
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 96
        }
      }, 'View Claims')))))), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
          fileName: _jsxFileName,
          lineNumber: 102
        }
      }, _react2.default.createElement(_FundForm2.default, { address: this.props.address, __source: {
          fileName: _jsxFileName,
          lineNumber: 103
        }
      }))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 107
        }
      }, '\xA0')));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var insurancePool, detail;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                insurancePool = (0, _insurancePool2.default)(props.query.address);
                _context.next = 3;
                return insurancePool.methods.getDetail().call();

              case 3:
                detail = _context.sent;
                return _context.abrupt('return', {
                  address: props.query.address,
                  minimumPremium: detail[0],
                  balance: detail[1],
                  claimsCount: detail[2],
                  validatorsCount: detail[3],
                  manager: detail[4],
                  documentHash: detail[5]
                });

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return InsurancePoolShow;
}(_react.Component);

exports.default = InsurancePoolShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSW5zdXJhbmNlUG9vbFNob3ciLCJfQ29tcG9uZW50IiwiX19wcm90b19fIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlckNhcmRzIiwiX3Byb3BzIiwicHJvcHMiLCJiYWxhbmNlIiwibWFuYWdlciIsIm1pbmltdW1QcmVtaXVtIiwiZG9jdW1lbnRIYXNoIiwiY2xhaW1zQ291bnQiLCJ2YWxpZGF0b3JzQ291bnQiLCJpdGVtcyIsImhlYWRlciIsIm1ldGEiLCJocmVmIiwiZGVzY3JpcHRpb24iLCJzdHlsZSIsIm92ZXJmbG93V3JhcCIsInRhcmdldCIsInV0aWxzIiwiZnJvbVdlaSIsImNyZWF0ZUVsZW1lbnQiLCJHcm91cCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmVuZGVyIiwiUm93IiwiQ29sdW1uIiwid2lkdGgiLCJyb3V0ZSIsImFkZHJlc3MiLCJwcmltYXJ5IiwiX3JlZiIsIm1hcmsiLCJfY2FsbGVlIiwiaW5zdXJhbmNlUG9vbCIsImRldGFpbCIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJxdWVyeSIsIm1ldGhvZHMiLCJnZXREZXRhaWwiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFQQSxJQUFJQSxlQUFlLDJFQUFuQjs7O0FBU0EsSUFBSUMsb0JBQW9CLFVBQVVDLFVBQVYsRUFBc0I7QUFDNUMsMEJBQVVELGlCQUFWLEVBQTZCQyxVQUE3Qjs7QUFFQSxXQUFTRCxpQkFBVCxHQUE2QjtBQUMzQixrQ0FBZ0Is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