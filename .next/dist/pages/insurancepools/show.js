'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _insurancePool = require('../../ethereum/insurancePool');

var _insurancePool2 = _interopRequireDefault(_insurancePool);

var _semanticUiReact = require('semantic-ui-react');

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _FundForm = require('../../components/FundForm');

var _FundForm2 = _interopRequireDefault(_FundForm);

var _routes = require('../../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsurance/pages/insurancepools/show.js?entry';


var InsurancePoolShow = function (_Component) {
  (0, _inherits3.default)(InsurancePoolShow, _Component);

  function InsurancePoolShow() {
    (0, _classCallCheck3.default)(this, InsurancePoolShow);

    return (0, _possibleConstructorReturn3.default)(this, (InsurancePoolShow.__proto__ || (0, _getPrototypeOf2.default)(InsurancePoolShow)).apply(this, arguments));
  }

  (0, _createClass3.default)(InsurancePoolShow, [{
    key: 'renderCards',
    value: function renderCards() {
      var _props = this.props,
          balance = _props.balance,
          manager = _props.manager,
          minimumPremium = _props.minimumPremium,
          documentHash = _props.documentHash,
          claimsCount = _props.claimsCount,
          validatorsCount = _props.validatorsCount;

      var items = [{
        header: manager,
        meta: 'Address of manager',
        description: 'Manager create this pool and can create claims on behalf of',
        style: { overflowWrap: 'break-word' }
      }, {
        header: minimumPremium,
        meta: 'Minimum Premium in weis',
        description: 'To ensure peace of mind you must contribute at least this much wei, also to become validator'
      }, {
        header: claimsCount,
        meta: 'Number of Claims',
        description: 'Number of claims so far on this safety pin pool. Claims must be validated by validators'
      }, {
        header: validatorsCount,
        meta: 'Number of validators',
        description: 'Number of addresses that funded this pool and can act as validators'
      }, {
        header: _web2.default.utils.fromWei(balance, 'ether'),
        meta: 'Safety Pin Pool Balance(ether)',
        description: 'How much fund this pool has left'
      }, {
        header: documentHash,
        meta: 'Document Hash',
        description: 'Hash of Uploaded Documents',
        style: { overflowWrap: 'break-word' }
      }];

      return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
          fileName: _jsxFileName,
          lineNumber: 73
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 78
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 79
        }
      }, 'Pool Details Show'), _react2.default.createElement(_semanticUiReact.Grid, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 80
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 81
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 10, __source: {
          fileName: _jsxFileName,
          lineNumber: 82
        }
      }, this.renderCards(), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 84
        }
      }, '\xA0'), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 87
        }
      }, _react2.default.createElement(_semanticUiReact.Grid.Column, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 88
        }
      }, _react2.default.createElement(_routes.Link, { route: '/insurancepools/' + this.props.address + '/claims', __source: {
          fileName: _jsxFileName,
          lineNumber: 89
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 90
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, __source: {
          fileName: _jsxFileName,
          lineNumber: 91
        }
      }, 'View Claims')))))), _react2.default.createElement(_semanticUiReact.Grid.Column, { width: 6, __source: {
          fileName: _jsxFileName,
          lineNumber: 97
        }
      }, _react2.default.createElement(_FundForm2.default, { address: this.props.address, __source: {
          fileName: _jsxFileName,
          lineNumber: 98
        }
      }))), _react2.default.createElement(_semanticUiReact.Grid.Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 102
        }
      }, '\xA0')));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var insurancePool, detail;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                insurancePool = (0, _insurancePool2.default)(props.query.address);
                _context.next = 3;
                return insurancePool.methods.getDetail().call();

              case 3:
                detail = _context.sent;
                return _context.abrupt('return', {
                  address: props.query.address,
                  minimumPremium: detail[0],
                  balance: detail[1],
                  claimsCount: detail[2],
                  validatorsCount: detail[3],
                  manager: detail[4],
                  documentHash: detail[5]
                });

              case 5:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return InsurancePoolShow;
}(_react.Component);

exports.default = InsurancePoolShow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSW5zdXJhbmNlUG9vbFNob3ciLCJfQ29tcG9uZW50IiwiX19wcm90b19fIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJrZXkiLCJ2YWx1ZSIsInJlbmRlckNhcmRzIiwiX3Byb3BzIiwicHJvcHMiLCJiYWxhbmNlIiwibWFuYWdlciIsIm1pbmltdW1QcmVtaXVtIiwiZG9jdW1lbnRIYXNoIiwiY2xhaW1zQ291bnQiLCJ2YWxpZGF0b3JzQ291bnQiLCJpdGVtcyIsImhlYWRlciIsIm1ldGEiLCJkZXNjcmlwdGlvbiIsInN0eWxlIiwib3ZlcmZsb3dXcmFwIiwidXRpbHMiLCJmcm9tV2VpIiwiY3JlYXRlRWxlbWVudCIsIkdyb3VwIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJyZW5kZXIiLCJSb3ciLCJDb2x1bW4iLCJ3aWR0aCIsInJvdXRlIiwiYWRkcmVzcyIsInByaW1hcnkiLCJfcmVmIiwibWFyayIsIl9jYWxsZWUiLCJpbnN1cmFuY2VQb29sIiwiZGV0YWlsIiwid3JhcCIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJwcmV2IiwibmV4dCIsInF1ZXJ5IiwibWV0aG9kcyIsImdldERldGFpbCIsImNhbGwiLCJzZW50IiwiYWJydXB0Iiwic3RvcCIsImdldEluaXRpYWxQcm9wcyIsIl94Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQVBBLElBQUlBLGVBQWUsdUVBQW5COzs7QUFTQSxJQUFJQyxvQkFBb0IsVUFBVUMsVUFBVixFQUFzQjtBQUM1QywwQkFBVUQsaUJBQVYsRUFBNkJDLFVBQTdCOztBQUVBLFdBQVNELGlCQUFULEdBQTZCO0FBQzNCLGtDQUFnQixJQUFoQixFQUFzQkEsaUJB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RixDQTdGRixDQWxCSyxDQUFQO0FBMkhEO0FBOUhBLEdBOUM2QixDQUFoQyxFQTZLSSxDQUFDO0FBQ0h2QixTQUFLLGlCQURGO0FBRUhDLFdBQU8sWUFBWTtBQUNqQixVQUFJOEIsT0FBTyxpQ0FBbUIsYUFBYSxzQkFBb0JDLElBQXBCLENBQXlCLFNBQVNDLE9BQVQsQ0FBaUI3QixLQUFqQixFQUF3QjtBQUMxRixZQUFJOEIsYUFBSixFQUFtQkMsTUFBbkI7QUFDQSxlQUFPLHNCQUFvQkMsSUFBcEIsQ0FBeUIsU0FBU0MsUUFBVCxDQUFrQkMsUUFBbEIsRUFBNEI7QUFDMUQsaUJBQU8sQ0FBUCxFQUFVO0FBQ1Isb0JBQVFBLFNBQVNDLElBQVQsR0FBZ0JELFNBQVNFLElBQWpDO0FBQ0UsbUJBQUssQ0FBTDtBQUNFTixnQ0FBZ0IsNkJBQWM5QixNQUFNcUMsS0FBTixDQUFZWixPQUExQixDQUFoQjtBQUNBUyx5QkFBU0UsSUFBVCxHQUFnQixDQUFoQjtBQUNBLHVCQUFPTixjQUFjUSxPQUFkLENBQXNCQyxTQUF0QixHQUFrQ0MsSUFBbEMsRUFBUDs7QUFFRixtQkFBSyxDQUFMO0FBQ0VULHlCQUFTRyxTQUFTTyxJQUFsQjtBQUNBLHVCQUFPUCxTQUFTUSxNQUFULENBQWdCLFFBQWhCLEVBQTBCO0FBQy9CakIsMkJBQVN6QixNQUFNcUMsS0FBTixDQUFZWixPQURVO0FBRS9CdEIsa0NBQWdCNEIsT0FBTyxDQUFQLENBRmU7QUFHL0I5QiwyQkFBUzhCLE9BQU8sQ0FBUCxDQUhzQjtBQUkvQjFCLCtCQUFhMEIsT0FBTyxDQUFQLENBSmtCO0FBSy9CekIsbUNBQWlCeUIsT0FBTyxDQUFQLENBTGM7QUFNL0I3QiwyQkFBUzZCLE9BQU8sQ0FBUCxDQU5zQjtBQU8vQjNCLGdDQUFjMkIsT0FBTyxDQUFQO0FBUGlCLGlCQUExQixDQUFQOztBQVVGLG1CQUFLLENBQUw7QUFDQSxtQkFBSyxLQUFMO0FBQ0UsdUJBQU9HLFNBQVNTLElBQVQsRUFBUDtBQXBCSjtBQXNCRDtBQUNGLFNBekJNLEVBeUJKZCxPQXpCSSxFQXlCSyxJQXpCTCxDQUFQO0FBMEJELE9BNUIwQyxDQUFoQyxDQUFYOztBQThCQSxlQUFTZSxlQUFULENBQXlCQyxFQUF6QixFQUE2QjtBQUMzQixlQUFPbEIsS0FBS2pDLEtBQUwsQ0FBVyxJQUFYLEVBQWlCQyxTQUFqQixDQUFQO0FBQ0Q7O0FBRUQsYUFBT2lELGVBQVA7QUFDRCxLQXBDTTtBQUZKLEdBQUQsQ0E3S0o7O0FBc05BLFNBQU9yRCxpQkFBUDtBQUNELENBaE91QixrQkFBeEI7O2tCQWtPZUEsaUIiLCJmaWxlIjoidW5rbm93biJ9