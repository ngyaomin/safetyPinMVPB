'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Layout = require('../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _semanticUiReact = require('semantic-ui-react');

var _factory = require('../../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _web = require('../../ethereum/web3');

var _web2 = _interopRequireDefault(_web);

var _routes = require('../../routes');

var _uploady = require('@rpldy/uploady');

var _uploady2 = _interopRequireDefault(_uploady);

var _uploadButton = require('@rpldy/upload-button');

var _uploadButton2 = _interopRequireDefault(_uploadButton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsuranceMVPB/pages/insurancepools/new.js?entry'; // link not use now, maybe use later, i lazy so put here


var InsurancePoolNew = function (_Component) {
  (0, _inherits3.default)(InsurancePoolNew, _Component);

  function InsurancePoolNew() {
    var _ref,
        _this2 = this;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, InsurancePoolNew);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = InsurancePoolNew.__proto__ || (0, _getPrototypeOf2.default)(InsurancePoolNew)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      minimumPremium: '',
      errorMessage: '',
      documentHash: '',
      loading: false
    }, _this.onSubmit = function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(event) {
        var accounts;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                event.preventDefault();

                _this.setState({ loading: true, errorMessage: '' });

                _context.prev = 2;
                _context.next = 5;
                return _web2.default.eth.getAccounts();

              case 5:
                accounts = _context.sent;
                _context.next = 8;
                return _factory2.default.methods.createInsurancePool(_this.state.minimumPremium, _this.state.documentHash).send({
                  from: accounts[0]
                });

              case 8:

                _routes.Router.pushRoute('/poolindex');

                _context.next = 14;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context['catch'](2);

                _this.setState({ errorMessage: _context.t0.message });

              case 14:

                _this.setState({ loading: false });

              case 15:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, _this2, [[2, 11]]);
      }));

      return function (_x) {
        return _ref2.apply(this, arguments);
      };
    }(), _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(InsurancePoolNew, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return (
        // right now we are doing the case where few requesters can request same insurance
        // if the case of few providers providing same insurance than we will set up a
        // min payout
        // the mechanics will be complex, but for now we keep this simple

        _react2.default.createElement(_Layout2.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 49
          }
        }, _react2.default.createElement('h3', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 51
          }
        }, 'Create a new insurance pool offer'), _react2.default.createElement(_uploady2.default, { destination: { url: "https://drive.google.com/drive/folders/1cBBWggk_W6qbHvdNs8hBxPlNXqdURJFq?usp=sharing" }, __source: {
            fileName: _jsxFileName,
            lineNumber: 53
          }
        }, _react2.default.createElement(_uploadButton2.default, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 55
          }
        }), _react2.default.createElement(_routes.Link, { route: 'http://localhost:3001/', __source: {
            fileName: _jsxFileName,
            lineNumber: 56
          }
        }, _react2.default.createElement('a', { target: '_blank', __source: {
            fileName: _jsxFileName,
            lineNumber: 57
          }
        }, '\xA0 Upload Supporting Files Here (for demo only real upload server cant afford, click here for external IPFS )'))), _react2.default.createElement('br', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 63
          }
        }), _react2.default.createElement('br', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 63
          }
        }), _react2.default.createElement(_semanticUiReact.Form, { onSubmit: this.onSubmit, error: !!this.state.errorMessage, __source: {
            fileName: _jsxFileName,
            lineNumber: 65
          }
        }, _react2.default.createElement(_semanticUiReact.Form.Field, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 66
          }
        }, _react2.default.createElement('label', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 67
          }
        }, ' Minimum Premium'), _react2.default.createElement(_semanticUiReact.Input, {
          label: 'wei',
          labelPosition: 'right',
          value: this.state.minimumPremium,
          onChange: function onChange(event) {
            return _this3.setState({ minimumPremium: event.target.value });
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 68
          }
        })), _react2.default.createElement(_semanticUiReact.Form.Field, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 76
          }
        }, _react2.default.createElement('label', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 77
          }
        }, ' Document Hashes (For now paste in the hash from the external ipfs system)'), _react2.default.createElement(_semanticUiReact.Input, {
          label: 'Hash',
          labelPosition: 'right',
          value: this.state.documentHash,
          onChange: function onChange(event) {
            return _this3.setState({ documentHash: event.target.value });
          },
          __source: {
            fileName: _jsxFileName,
            lineNumber: 78
          }
        })), _react2.default.createElement(_semanticUiReact.Message, { error: true, header: 'Opps!', content: this.state.errorMessage, __source: {
            fileName: _jsxFileName,
            lineNumber: 86
          }
        }), _react2.default.createElement(_semanticUiReact.Button, {
          loading: this.state.loading,
          primary: true, __source: {
            fileName: _jsxFileName,
            lineNumber: 87
          }
        }, 'Offer a new pool'), _react2.default.createElement('h5', {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 91
          }
        }, ' Pls ensure you have logged in and connect to metamask for this site for transactions ')))
      );
    }
  }]);

  return InsurancePoolNew;
}(_react.Component);

exports.default = InsurancePoolNew;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiSW5zdXJhbmNlUG9vbE5ldyIsIl9Db21wb25lbnQiLCJfcmVmIiwiX3RoaXMyIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIl9fcHJvdG9fXyIsImNhbGwiLCJhcHBseSIsImNvbmNhdCIsInN0YXRlIiwibWluaW11bVByZW1pdW0iLCJlcnJvck1lc3NhZ2UiLCJkb2N1bWVudEhhc2giLCJsb2FkaW5nIiwib25TdWJtaXQiLCJfcmVmMiIsIm1hcmsiLCJfY2FsbGVlIiwiZXZlbnQiLCJhY2NvdW50cyIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJwcmV2ZW50RGVmYXVsdCIsInNldFN0YXRlIiwiZXRoIiwiZ2V0QWNjb3VudHMiLCJzZW50IiwibWV0aG9kcyIsImNyZWF0ZUluc3VyYW5jZVBvb2wiLCJzZW5kIiwiZnJvbSIsInB1c2hSb3V0ZSIsInQwIiwibWVzc2FnZSIsInN0b3AiLCJfeCIsImtleSIsInZhbHVlIiwicmVuZGVyIiwiX3RoaXMzIiwiY3JlYXRlRWxlbWVudCIsIl9fc291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZGVzdGluYXRpb24iLCJ1cmwiLCJyb3V0ZSIsInRhcmdldCIsImVycm9yIiwiRmllbGQiLCJsYWJlbCIsImxhYmVsUG9zaXRpb24iLCJvbkNoYW5nZSIsImhlYWRlciIsImNvbnRlbnQiLCJwcmltYXJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBUkEsSUFBSUEsZUFBZSwwRUFBbkIsQyxDQU11Qzs7O0FBS3ZDLElBQUlD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O0FBQ1JDLHNCQUFVdEQsWUFERjtBQUVSdUQsd0JBQVk7QUFGSjtBQVBlLFNBQTNCLENBbEJGLENBUEYsRUFzQ0UsZ0JBQU1ILGFBQU4sQ0FDRSxzQkFBS1MsS0FEUCxFQUVFO0FBQ0VSLG9CQUFVO0FBQ1JDLHNCQUFVdEQsWUFERjtBQUVSdUQsd0JBQVk7QUFGSjtBQURaLFNBRkYsRUFRRSxnQkFBTUgsYUFBTixDQUNFLE9BREYsRUFFRTtBQUNFQyxvQkFBVTtBQUNSQyxzQkFBVXRELFlBREY7QUFFUnVELHdCQUFZO0FBRko7QUFEWixTQUZGLEVBUUUsNEVBUkYsQ0FSRixFQWtCRSxnQkFBTUgsYUFBTix5QkFBMkI7QUFDekJVLGlCQUFPLE1BRGtCO0FBRXpCQyx5QkFBZSxPQUZVO0FBR3pCZCxpQkFBTyxLQUFLL0IsS0FBTCxDQUFXRyxZQUhPO0FBSXpCMkMsb0JBQVUsU0FBU0EsUUFBVCxDQUFrQnJDLEtBQWxCLEVBQXlCO0FBQ2pDLG1CQUFPd0IsT0FBT2hCLFFBQVAsQ0FBZ0IsRUFBRWQsY0FBY00sTUFBTWdDLE1BQU4sQ0FBYVYsS0FBN0IsRUFBaEIsQ0FBUDtBQUNELFdBTndCO0FBT3pCSSxvQkFBVTtBQUNSQyxzQkFBVXRELFlBREY7QUFFUnVELHdCQUFZO0FBRko7QUFQZSxTQUEzQixDQWxCRixDQXRDRixFQXFFRSxnQkFBTUgsYUFBTiwyQkFBNkIsRUFBRVEsT0FBTyxJQUFULEVBQWVLLFFBQVEsT0FBdkIsRUFBZ0NDLFNBQVMsS0FBS2hELEtBQUwsQ0FBV0UsWUFBcEQsRUFBa0VpQyxVQUFVO0FBQ3JHQyxzQkFBVXRELFlBRDJGO0FBRXJHdUQsd0JBQVk7QUFGeUY7QUFBNUUsU0FBN0IsQ0FyRUYsRUEwRUUsZ0JBQU1ILGFBQU4sMEJBRUU7QUFDRTlCLG1CQUFTLEtBQUtKLEtBQUwsQ0FBV0ksT0FEdEI7QUFFRTZDLG1CQUFTLElBRlgsRUFFaUJkLFVBQVU7QUFDdkJDLHNCQUFVdEQsWUFEYTtBQUV2QnVELHdCQUFZO0FBRlc7QUFGM0IsU0FGRixFQVNFLGtCQVRGLENBMUVGLEVBcUZFLGdCQUFNSCxhQUFOLENBQ0UsSUFERixFQUVFO0FBQ0VDLG9CQUFVO0FBQ1JDLHNCQUFVdEQsWUFERjtBQUVSdUQsd0JBQVk7QUFGSjtBQURaLFNBRkYsRUFRRSx3RkFSRixDQXJGRixDQTdERjtBQU5GO0FBcUtEO0FBMUs2QixHQUFELENBQS9COztBQTZLQSxTQUFPdEQsZ0JBQVA7QUFDRCxDQXZQc0Isa0JBQXZCOztrQkF5UGVBLGdCIiwiZmlsZSI6InVua25vd24ifQ==