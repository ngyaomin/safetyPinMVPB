'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _Layout = require('../../../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _semanticUiReact = require('semantic-ui-react');

var _routes = require('../../../routes');

var _insurancePool = require('../../../ethereum/insurancePool');

var _insurancePool2 = _interopRequireDefault(_insurancePool);

var _ClaimRow = require('../../../components/ClaimRow');

var _ClaimRow2 = _interopRequireDefault(_ClaimRow);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = '/Users/yaomin/distributedInsuranceMVPB/pages/insurancepools/claims/index.js?entry';


var ClaimIndex = function (_Component) {
  (0, _inherits3.default)(ClaimIndex, _Component);

  function ClaimIndex() {
    (0, _classCallCheck3.default)(this, ClaimIndex);

    return (0, _possibleConstructorReturn3.default)(this, (ClaimIndex.__proto__ || (0, _getPrototypeOf2.default)(ClaimIndex)).apply(this, arguments));
  }

  (0, _createClass3.default)(ClaimIndex, [{
    key: 'renderRows',
    value: function renderRows() {
      var _this2 = this;

      return this.props.claims.map(function (claim, index) {
        return _react2.default.createElement(_ClaimRow2.default, {
          key: index,
          id: index,
          claim: claim,
          address: _this2.props.address,
          validatorsCount: _this2.props.validatorsCount,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 30
          }
        });
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var Header = _semanticUiReact.Table.Header,
          Row = _semanticUiReact.Table.Row,
          HeaderCell = _semanticUiReact.Table.HeaderCell,
          Body = _semanticUiReact.Table.Body;

      return _react2.default.createElement(_Layout2.default, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 46
        }
      }, _react2.default.createElement('h3', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 47
        }
      }, 'Claims List'), _react2.default.createElement('h5', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 48
        }
      }, ' Pls ensure you have logged in and connect to metamask for this site for transactions '), _react2.default.createElement(_routes.Link, { route: '/insurancepools/' + this.props.address + '/claims/new', __source: {
          fileName: _jsxFileName,
          lineNumber: 49
        }
      }, _react2.default.createElement('a', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 50
        }
      }, _react2.default.createElement(_semanticUiReact.Button, { primary: true, floated: 'right', style: { marginBottom: 10 }, __source: {
          fileName: _jsxFileName,
          lineNumber: 51
        }
      }, 'Add a Claim'))), _react2.default.createElement(_semanticUiReact.Table, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 54
        }
      }, _react2.default.createElement(Header, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 55
        }
      }, _react2.default.createElement(Row, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 56
        }
      }, _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 57
        }
      }, 'ID'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 58
        }
      }, 'Description'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 59
        }
      }, 'Amount Claim'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      }, 'Claimer'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 61
        }
      }, 'Validated Count'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 62
        }
      }, 'Validate'), _react2.default.createElement(HeaderCell, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 63
        }
      }, 'Finalize'))), _react2.default.createElement(Body, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 66
        }
      }, this.renderRows())), _react2.default.createElement('div', {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 68
        }
      }, 'Found ', this.props.claimCount, ' claims.'));
    }
  }], [{
    key: 'getInitialProps',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
        var address, insurancePool, claimCount, validatorsCount, claims;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                address = props.query.address;
                insurancePool = (0, _insurancePool2.default)(address);
                _context.next = 4;
                return insurancePool.methods.getClaimsCount().call();

              case 4:
                claimCount = _context.sent;
                _context.next = 7;
                return insurancePool.methods.validatorsCount().call();

              case 7:
                validatorsCount = _context.sent;
                _context.next = 10;
                return _promise2.default.all(Array(parseInt(claimCount)).fill().map(function (element, index) {
                  return insurancePool.methods.claims(index).call();
                }));

              case 10:
                claims = _context.sent;
                return _context.abrupt('return', { address: address, claims: claims, claimCount: claimCount, validatorsCount: validatorsCount });

              case 12:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getInitialProps(_x) {
        return _ref.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }]);

  return ClaimIndex;
}(_react.Component);

exports.default = ClaimIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwiQ2xhaW1JbmRleCIsIl9Db21wb25lbnQiLCJfX3Byb3RvX18iLCJhcHBseSIsImFyZ3VtZW50cyIsImtleSIsInZhbHVlIiwicmVuZGVyUm93cyIsIl90aGlzMiIsInByb3BzIiwiY2xhaW1zIiwibWFwIiwiY2xhaW0iLCJpbmRleCIsImNyZWF0ZUVsZW1lbnQiLCJpZCIsImFkZHJlc3MiLCJ2YWxpZGF0b3JzQ291bnQiLCJfX3NvdXJjZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsInJlbmRlciIsIkhlYWRlciIsIlJvdyIsIkhlYWRlckNlbGwiLCJCb2R5Iiwicm91dGUiLCJwcmltYXJ5IiwiZmxvYXRlZCIsInN0eWxlIiwibWFyZ2luQm90dG9tIiwiY2xhaW1Db3VudCIsIl9yZWYiLCJtYXJrIiwiX2NhbGxlZSIsImluc3VyYW5jZVBvb2wiLCJ3cmFwIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsInByZXYiLCJuZXh0IiwicXVlcnkiLCJtZXRob2RzIiwiZ2V0Q2xhaW1zQ291bnQiLCJjYWxsIiwic2VudCIsImFsbCIsIkFycmF5IiwicGFyc2VJbnQiLCJmaWxsIiwiZWxlbWVudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiLCJfeCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUNBOzs7Ozs7QUFOQSxJQUFJQSxlQUFlLG1GQUFuQjs7O0FBUUEsSUFBSUMsYUFBYSxVQUFVQyxVQUFWLEVBQXNCO0FBQ3JDLDBCQUFVRCxVQUFWLEVBQXNCQyxVQUF0Qjs7QUFFQSxXQUFTRCxVQUFULEdBQXNCO0FBQ3BCLGtDQUFnQixJQUFoQixFQUFzQkEsVUFBdEI7O0FBRUEsV0FBTyx5Q0FBMkIsSUFBM0IsRUFBaUMs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