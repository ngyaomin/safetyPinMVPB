import { BATCH_STATES, createBatchItem } from "@rpldy/shared";
import { DEFAULT_FILTER } from "./defaults";
import { getIsFileList } from "./utils";
var bCounter = 0;

var processFiles = function (batchId, files, fileFilter) {
  return Array.prototype.filter.call(files, fileFilter || DEFAULT_FILTER).map(function (f) {
    return createBatchItem(f, batchId);
  });
};

export default (function (files, uploaderId, options) {
  bCounter += 1;
  var id = "batch-".concat(bCounter);
  var isFileList = getIsFileList(files);
  files = Array.isArray(files) || isFileList ? files : [files];
  return {
    id: id,
    uploaderId: uploaderId,
    items: processFiles(id, files, options.fileFilter),
    state: BATCH_STATES.ADDED,
    completed: 0,
    loaded: 0
  };
});