function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import { logger, hasWindow, isFunction } from "@rpldy/shared";
import createState from "@rpldy/simple-state";
import { SENDER_EVENTS, UPLOADER_EVENTS } from "../consts";
import processQueueNext from "./processQueueNext";
import * as abortMethods from "./abort";
import { detachRecycledFromPreviousBatch, getBatchFromState } from "./batchHelpers";

var createUploaderQueue = function (options, trigger, cancellable, sender, uploaderId) {
  var _createState = createState({
    itemQueue: [],
    currentBatch: null,
    batches: {},
    items: {},
    activeIds: [],
    aborts: {}
  }),
      state = _createState.state,
      update = _createState.update;

  var getState = function () {
    return state;
  };

  var updateState = function (updater) {
    update(updater);
  };

  var add = function (item) {
    if (state.items[item.id] && !item.recycled) {
      throw new Error("Uploader queue conflict - item ".concat(item.id, " already exists"));
    }

    if (item.recycled) {
      detachRecycledFromPreviousBatch(queueState, item);
    }

    updateState(function (state) {
      state.items[item.id] = item;
      state.itemQueue.push(item.id);
    });
  };

  var handleItemProgress = function (item, completed, loaded) {
    if (state.items[item.id]) {
      updateState(function (state) {
        var stateItem = state.items[item.id];
        stateItem.loaded = loaded;
        stateItem.completed = completed;
      }); //trigger item progress event for the outside

      trigger(UPLOADER_EVENTS.ITEM_PROGRESS, getState().items[item.id]);
    }
  };

  sender.on(SENDER_EVENTS.ITEM_PROGRESS, handleItemProgress);
  sender.on(SENDER_EVENTS.BATCH_PROGRESS, function (batch) {
    var _state$batches$batch$;

    var batchItems = (_state$batches$batch$ = state.batches[batch.id]) === null || _state$batches$batch$ === void 0 ? void 0 : _state$batches$batch$.batch.items;

    if (batchItems) {
      var _batchItems$reduce = batchItems.reduce(function (res, item) {
        res[0] += item.completed;
        res[1] += item.loaded;
        return res;
      }, [0, 0]),
          _batchItems$reduce2 = _slicedToArray(_batchItems$reduce, 2),
          completed = _batchItems$reduce2[0],
          loaded = _batchItems$reduce2[1];

      updateState(function (state) {
        var stateBatch = state.batches[batch.id].batch; //average of completed percentage for batch items

        stateBatch.completed = completed / batchItems.length; //sum of loaded bytes for batch items

        stateBatch.loaded = loaded;
      });
      trigger(UPLOADER_EVENTS.BATCH_PROGRESS, state.batches[batch.id].batch);
    }
  });
  var queueState = {
    getOptions: function getOptions() {
      return options;
    },
    getCurrentActiveCount: function getCurrentActiveCount() {
      return state.activeIds.length;
    },
    getState: getState,
    updateState: updateState,
    trigger: trigger,
    runCancellable: function runCancellable(name) {
      if (!isFunction(cancellable)) {
        //for flow :(
        throw new Error("cancellable is of wrong type");
      }

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return cancellable.apply(void 0, [name].concat(args));
    },
    sender: sender,
    handleItemProgress: handleItemProgress
  };

  if (hasWindow() && logger.isDebugOn()) {
    window["__rpldy_".concat(uploaderId, "_queue_state")] = queueState;
  }

  return {
    updateState: updateState,
    getState: queueState.getState,
    runCancellable: queueState.runCancellable,
    uploadBatch: function uploadBatch(batch, batchOptions) {
      if (batchOptions) {
        updateState(function (state) {
          state.batches[batch.id].batchOptions = batchOptions;
        });
      }

      batch.items.forEach(add);
      processQueueNext(queueState);
    },
    addBatch: function addBatch(batch, batchOptions) {
      updateState(function (state) {
        state.batches[batch.id] = {
          batch: batch,
          batchOptions: batchOptions
        };
      });
      return getBatchFromState(state, batch.id);
    },
    abortItem: function abortItem(id) {
      return abortMethods.abortItem(queueState, id, processQueueNext);
    },
    abortBatch: function abortBatch(id) {
      abortMethods.abortBatch(queueState, id, processQueueNext);
    },
    abortAll: function abortAll() {
      abortMethods.abortAll(queueState, processQueueNext);
    }
  };
};

export default createUploaderQueue;