function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { isFunction, logger, throttle } from "@rpldy/shared";
import addLife from "@rpldy/life-events";
import defaultSend from "@rpldy/sender";
import { PROGRESS_DELAY, SENDER_EVENTS } from "./consts";
import { DEFAULT_OPTIONS, DEFAULT_PARAM_NAME } from "./defaults";

var reportItemsProgress = function (items, completed, loaded, trigger) {
  items.forEach(function (item) {
    logger.debugLog("uploady.uploader.processor: file: ".concat(item.id, " progress event: loaded(").concat(loaded, ") - completed(").concat(completed, ")"));
    trigger(SENDER_EVENTS.ITEM_PROGRESS, item, completed, loaded);
  });
};

var onItemUploadProgress = function (items, batch, e, trigger) {
  var completed = Math.min(e.loaded / e.total * 100, 100),
      completedPerItem = completed / items.length,
      loadedAverage = e.loaded / items.length;
  reportItemsProgress(items, completedPerItem, loadedAverage, trigger);
  trigger(SENDER_EVENTS.BATCH_PROGRESS, batch);
};

var createBatchItemsSender = function () {
  var _addLife = addLife({
    send: function (items, batch, batchOptions) {
      var destination = batchOptions.destination,
          url = destination === null || destination === void 0 ? void 0 : destination.url;
      var throttledProgress = throttle(function (e) {
        return onItemUploadProgress(items, batch, e, trigger);
      }, PROGRESS_DELAY, true);
      var send = isFunction(batchOptions.send) ? batchOptions.send : defaultSend;
      return send(items, url, {
        method: (destination === null || destination === void 0 ? void 0 : destination.method) || batchOptions.method || DEFAULT_OPTIONS.method,
        paramName: (destination === null || destination === void 0 ? void 0 : destination.filesParamName) || batchOptions.inputFieldName || DEFAULT_PARAM_NAME,
        params: _objectSpread(_objectSpread({}, batchOptions.params), destination === null || destination === void 0 ? void 0 : destination.params),
        forceJsonResponse: batchOptions.forceJsonResponse,
        withCredentials: batchOptions.withCredentials,
        formatGroupParamName: batchOptions.formatGroupParamName,
        headers: destination === null || destination === void 0 ? void 0 : destination.headers,
        sendWithFormData: batchOptions.sendWithFormData
      }, throttledProgress);
    }
  }, Object.values(SENDER_EVENTS)),
      trigger = _addLife.trigger,
      sender = _addLife.target;

  return sender;
};

export default createBatchItemsSender;