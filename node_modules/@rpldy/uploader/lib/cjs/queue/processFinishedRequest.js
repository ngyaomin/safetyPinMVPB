"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FILE_STATE_TO_EVENT_MAP = void 0;

var _shared = require("@rpldy/shared");

var _consts = require("../consts");

var _batchHelpers = require("./batchHelpers");

var _FILE_STATE_TO_EVENT_;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FILE_STATE_TO_EVENT_MAP = (_FILE_STATE_TO_EVENT_ = {}, _defineProperty(_FILE_STATE_TO_EVENT_, _shared.FILE_STATES.ADDED, _consts.UPLOADER_EVENTS.ITEM_START), _defineProperty(_FILE_STATE_TO_EVENT_, _shared.FILE_STATES.FINISHED, _consts.UPLOADER_EVENTS.ITEM_FINISH), _defineProperty(_FILE_STATE_TO_EVENT_, _shared.FILE_STATES.ERROR, _consts.UPLOADER_EVENTS.ITEM_ERROR), _defineProperty(_FILE_STATE_TO_EVENT_, _shared.FILE_STATES.CANCELLED, _consts.UPLOADER_EVENTS.ITEM_CANCEL), _defineProperty(_FILE_STATE_TO_EVENT_, _shared.FILE_STATES.ABORTED, _consts.UPLOADER_EVENTS.ITEM_ABORT), _defineProperty(_FILE_STATE_TO_EVENT_, _shared.FILE_STATES.UPLOADING, _consts.UPLOADER_EVENTS.ITEM_PROGRESS), _FILE_STATE_TO_EVENT_);
exports.FILE_STATE_TO_EVENT_MAP = FILE_STATE_TO_EVENT_MAP;
var ITEM_FINALIZE_STATES = [_shared.FILE_STATES.FINISHED, _shared.FILE_STATES.ERROR, _shared.FILE_STATES.CANCELLED, _shared.FILE_STATES.ABORTED];

var getIsFinalized = function (item) {
  return !!~ITEM_FINALIZE_STATES.indexOf(item.state);
};

var processFinishedRequest = function (queue, finishedData, next) {
  finishedData.forEach(function (itemData) {
    var state = queue.getState();
    var id = itemData.id,
        info = itemData.info;

    _shared.logger.debugLog("uploader.processor.queue: request finished for item - ", {
      id: id,
      info: info
    });

    if (state.items[id]) {
      queue.updateState(function (state) {
        var item = state.items[id];
        item.state = info.state;
        item.uploadResponse = info.response;

        if (getIsFinalized(item)) {
          delete state.aborts[id];
        }
      }); //get most up-to-date item data

      var item = queue.getState().items[id];

      if (info.state === _shared.FILE_STATES.FINISHED && item.completed < 100) {
        //ensure we trigger progress event with completed = 100 for all items
        queue.handleItemProgress(item, 100, item.file ? item.file.size : 0);
      } //trigger UPLOADER EVENT for item based on its state


      queue.trigger(FILE_STATE_TO_EVENT_MAP[item.state], item);

      if (getIsFinalized(item)) {
        //trigger FINALIZE event
        queue.trigger(_consts.UPLOADER_EVENTS.ITEM_FINALIZE, item);
      }
    }

    var index = state.itemQueue.indexOf(id);

    if (~index) {
      queue.updateState(function (state) {
        state.itemQueue.splice(index, 1);
        var activeIndex = state.activeIds.indexOf(id);

        if (~activeIndex) {
          state.activeIds.splice(activeIndex, 1);
        }
      });
    }
  });
  (0, _batchHelpers.cleanUpFinishedBatch)(queue);
  return next(queue);
};

var _default = processFinishedRequest;
exports["default"] = _default;