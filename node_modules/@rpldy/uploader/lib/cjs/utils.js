"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deepProxyUnwrap = exports.getIsFileList = exports.getMandatoryOptions = void 0;

var _shared = require("@rpldy/shared");

var _simpleState = require("@rpldy/simple-state");

var _defaults = require("./defaults");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FILE_LIST_SUPPORT = (0, _shared.hasWindow)() && "FileList" in window;

var getMandatoryDestination = function (dest) {
  return _objectSpread({
    filesParamName: _defaults.DEFAULT_PARAM_NAME,
    params: {}
  }, dest);
};

var getMandatoryOptions = function (options) {
  return _objectSpread(_objectSpread(_objectSpread({}, _defaults.DEFAULT_OPTIONS), options), {}, {
    destination: options && options.destination ? getMandatoryDestination(options.destination) : null
  });
};

exports.getMandatoryOptions = getMandatoryOptions;

var getIsFileList = function (files) {
  return (//in case files list was created in a different context(window) need to check toString
    FILE_LIST_SUPPORT && files instanceof FileList || files.toString() === "[object FileList]"
  );
};
/***
 * will unwrap object from proxy
 * if obj itself isnt a proxy, will look for a proxy max 2 levels deep
 */


exports.getIsFileList = getIsFileList;

var deepProxyUnwrap = function (obj) {
  var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var result = obj;

  if (!(0, _shared.isProduction)()) {
    if (level < 3 && (0, _simpleState.isProxy)(obj)) {
      result = (0, _simpleState.unwrap)(obj);
    } else if (level < 3 && (0, _simpleState.isProxiable)(obj)) {
      result = Array.isArray(obj) ? Object.keys(obj).map(function (key) {
        return deepProxyUnwrap(obj[key]);
      }) : Object.keys(obj).reduce(function (res, key) {
        res[key] = deepProxyUnwrap(obj[key], level + 1);
        return res;
      }, {});
    }
  }

  return result;
};

exports.deepProxyUnwrap = deepProxyUnwrap;