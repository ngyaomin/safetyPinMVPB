"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logWarning = exports.generateUploaderEventHookWithState = exports.generateUploaderEventHook = void 0;

var _react = require("react");

var _shared = require("@rpldy/shared");

var _useUploadyContext = _interopRequireDefault(require("./useUploadyContext"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var useEventEffect = function (event, fn) {
  var context = (0, _useUploadyContext["default"])();
  var on = context.on,
      off = context.off;
  (0, _react.useEffect)(function () {
    on(event, fn);
    return function () {
      off(event, fn);
    };
  }, [event, fn, on, off]);
};

var generateUploaderEventHookWithState = function (event, stateCalculator) {
  return function (fn, id) {
    var _useState = (0, _react.useState)(null),
        _useState2 = _slicedToArray(_useState, 2),
        eventState = _useState2[0],
        setEventState = _useState2[1];

    var eventCallback = (0, _react.useCallback)(function (eventObj) {
      if (!id || eventObj.id === id) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        setEventState(stateCalculator.apply(void 0, [eventObj].concat(args)));

        if (fn) {
          fn.apply(void 0, [eventObj].concat(args));
        }
      }
    }, [fn, id]);
    useEventEffect(event, eventCallback);
    return eventState;
  };
};

exports.generateUploaderEventHookWithState = generateUploaderEventHookWithState;

var generateUploaderEventHook = function (event) {
  var canScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return function (fn, id) {
    var eventCallback = (0, _react.useCallback)(function (eventObj) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      return fn && (!canScope || !id || eventObj.id === id) ? fn.apply(void 0, [eventObj].concat(args)) : undefined;
    }, [fn, id]);
    useEventEffect(event, eventCallback);
  };
};

exports.generateUploaderEventHook = generateUploaderEventHook;

var logWarning = function (condition, msg) {
  if (!(0, _shared.isProduction)() && !condition) {
    // eslint-disable-next-line no-console
    console.warn(msg);
  }
};

exports.logWarning = logWarning;