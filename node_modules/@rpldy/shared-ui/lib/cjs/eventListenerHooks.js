"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAllAbortListener = exports.useRequestPreSend = exports.useItemFinalizeListener = exports.useItemAbortListener = exports.useItemErrorListener = exports.useItemCancelListener = exports.useItemProgressListener = exports.useItemFinishListener = exports.useItemStartListener = exports.useBatchProgressListener = exports.useBatchAbortListener = exports.useBatchCancelledListener = exports.useBatchFinishListener = exports.useBatchStartListener = exports.useBatchAddListener = void 0;

var _uploader = require("@rpldy/uploader");

var _utils = require("./utils");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var useBatchAddListener = (0, _utils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_ADD, false);
exports.useBatchAddListener = useBatchAddListener;
var useBatchStartListener = (0, _utils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_START);
exports.useBatchStartListener = useBatchStartListener;
var useBatchFinishListener = (0, _utils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_FINISH);
exports.useBatchFinishListener = useBatchFinishListener;
var useBatchCancelledListener = (0, _utils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_CANCEL);
exports.useBatchCancelledListener = useBatchCancelledListener;
var useBatchAbortListener = (0, _utils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.BATCH_ABORT);
exports.useBatchAbortListener = useBatchAbortListener;
var useBatchProgressListener = (0, _utils.generateUploaderEventHookWithState)(_uploader.UPLOADER_EVENTS.BATCH_PROGRESS, function (batch) {
  return _objectSpread({}, batch);
});
exports.useBatchProgressListener = useBatchProgressListener;
var useItemStartListener = (0, _utils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_START);
exports.useItemStartListener = useItemStartListener;
var useItemFinishListener = (0, _utils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_FINISH);
exports.useItemFinishListener = useItemFinishListener;
var useItemCancelListener = (0, _utils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_CANCEL);
exports.useItemCancelListener = useItemCancelListener;
var useItemErrorListener = (0, _utils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_ERROR);
exports.useItemErrorListener = useItemErrorListener;
var useItemAbortListener = (0, _utils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_ABORT);
exports.useItemAbortListener = useItemAbortListener;
var useItemFinalizeListener = (0, _utils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ITEM_FINALIZE);
exports.useItemFinalizeListener = useItemFinalizeListener;
var useItemProgressListener = (0, _utils.generateUploaderEventHookWithState)(_uploader.UPLOADER_EVENTS.ITEM_PROGRESS, function (item) {
  return _objectSpread({}, item);
});
exports.useItemProgressListener = useItemProgressListener;
var useRequestPreSend = (0, _utils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.REQUEST_PRE_SEND, false);
exports.useRequestPreSend = useRequestPreSend;
var useAllAbortListener = (0, _utils.generateUploaderEventHook)(_uploader.UPLOADER_EVENTS.ALL_ABORT, false);
exports.useAllAbortListener = useAllAbortListener;