"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

var _shared = require("@rpldy/shared");

var _uploader = _interopRequireDefault(require("@rpldy/uploader"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var _default = function _default(options, listeners) {
  //avoid creating new instance of uploader (unless enhancer method changed)
  var uploader = (0, _react.useMemo)(function () {
    _shared.logger.debugLog("Uploady creating a new uploader instance", options);

    return (0, _uploader["default"])(options);
  }, //dont recreate the uploader when options changed - we do update later
  //eslint-disable-next-line react-hooks/exhaustive-deps
  [options.enhancer]); //Forgoing any kind of memoization. Probably not worth the comparison work to save on the options merge

  uploader.update(options);
  (0, _react.useEffect)(function () {
    if (listeners) {
      _shared.logger.debugLog("Uploady setting event listeners", listeners);

      Object.entries(listeners).forEach(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            name = _ref2[0],
            m = _ref2[1];

        uploader.on(name, m);
      });
    }

    return function () {
      if (listeners) {
        _shared.logger.debugLog("Uploady removing event listeners", listeners);

        Object.entries(listeners).forEach(function (_ref3) {
          var _ref4 = _slicedToArray(_ref3, 2),
              name = _ref4[0],
              m = _ref4[1];

          return uploader.off(name, m);
        });
      }
    };
  }, [listeners, uploader]);
  return uploader;
};

exports["default"] = _default;