function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { UPLOADER_EVENTS } from "@rpldy/uploader";
import { generateUploaderEventHook, generateUploaderEventHookWithState } from "./utils";
var useBatchAddListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ADD, false);
var useBatchStartListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_START);
var useBatchFinishListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_FINISH);
var useBatchCancelledListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_CANCEL);
var useBatchAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.BATCH_ABORT);
var useBatchProgressListener = generateUploaderEventHookWithState(UPLOADER_EVENTS.BATCH_PROGRESS, function (batch) {
  return _objectSpread({}, batch);
});
var useItemStartListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_START);
var useItemFinishListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINISH);
var useItemCancelListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_CANCEL);
var useItemErrorListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ERROR);
var useItemAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_ABORT);
var useItemFinalizeListener = generateUploaderEventHook(UPLOADER_EVENTS.ITEM_FINALIZE);
var useItemProgressListener = generateUploaderEventHookWithState(UPLOADER_EVENTS.ITEM_PROGRESS, function (item) {
  return _objectSpread({}, item);
});
var useRequestPreSend = generateUploaderEventHook(UPLOADER_EVENTS.REQUEST_PRE_SEND, false);
var useAllAbortListener = generateUploaderEventHook(UPLOADER_EVENTS.ALL_ABORT, false);
export { useBatchAddListener, useBatchStartListener, useBatchFinishListener, useBatchCancelledListener, useBatchAbortListener, useBatchProgressListener, useItemStartListener, useItemFinishListener, useItemProgressListener, useItemCancelListener, useItemErrorListener, useItemAbortListener, useItemFinalizeListener, useRequestPreSend, useAllAbortListener };