function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useMemo } from "react";
import { logger } from "@rpldy/shared";
import UploadyContext, { createContextApi } from "./UploadyContext";
import useUploader from "./useUploader";

var NoDomUploady = function (props) {
  var listeners = props.listeners,
      debug = props.debug,
      children = props.children,
      inputRef = props.inputRef,
      uploadOptions = _objectWithoutProperties(props, ["listeners", "debug", "children", "inputRef"]);

  logger.setDebug(!!debug);
  logger.debugLog("@@@@@@ Uploady Rendering @@@@@@", props);
  var uploader = useUploader(uploadOptions, listeners);
  var api = useMemo(function () {
    return createContextApi(uploader, inputRef);
  }, [uploader, inputRef]);
  return /*#__PURE__*/React.createElement(UploadyContext.Provider, {
    value: api
  }, children);
};

export default NoDomUploady;