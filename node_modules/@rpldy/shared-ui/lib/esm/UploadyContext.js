import React from "react";
import { logger, invariant } from "@rpldy/shared";
var UploadyContext = /*#__PURE__*/React.createContext(null);
var NO_INPUT_ERROR_MSG = "Uploady - Context. File input isn't available";
export var createContextApi = function (uploader, internalInputRef) {
  var fileInputRef, showFileUploadOptions;

  if (internalInputRef) {
    fileInputRef = internalInputRef;
  } else {
    logger.debugLog("Uploady context - didn't receive input field ref - waiting for external ref");
  }

  var getInputField = function () {
    var _fileInputRef;

    return (_fileInputRef = fileInputRef) === null || _fileInputRef === void 0 ? void 0 : _fileInputRef.current;
  };

  var onFileInputChange = function () {
    var input = getInputField();
    invariant(input, NO_INPUT_ERROR_MSG);
    input.removeEventListener("change", onFileInputChange);
    var addOptions = showFileUploadOptions;
    showFileUploadOptions = null;
    upload(input.files, addOptions);
  };

  var upload = function (files, addOptions) {
    uploader.add(files, addOptions);
  };

  return {
    hasUploader: function hasUploader() {
      return !!uploader;
    },
    setExternalFileInput: function setExternalFileInput(extRef) {
      fileInputRef = extRef;
    },
    showFileUpload: function showFileUpload(addOptions) {
      var input = getInputField();
      invariant(input, NO_INPUT_ERROR_MSG); //allow components like upload button to override options

      showFileUploadOptions = addOptions;
      input.removeEventListener("change", onFileInputChange);
      input.addEventListener("change", onFileInputChange); //clear the input value so same file can be uploaded again

      input.value = "";
      input.click();
    },
    upload: upload,
    processPending: function processPending(uploadOptions) {
      uploader.upload(uploadOptions);
    },
    setOptions: function setOptions(options) {
      uploader.update(options);
    },
    getOptions: function getOptions() {
      return uploader.getOptions();
    },
    getExtension: function getExtension(name) {
      return uploader.getExtension(name);
    },
    abort: function abort(itemId) {
      uploader.abort(itemId);
    },
    abortBatch: function abortBatch(batchId) {
      uploader.abortBatch(batchId);
    },
    on: function on(name, cb) {
      return uploader.on(name, cb);
    },
    once: function once(name, cb) {
      return uploader.once(name, cb);
    },
    off: function off(name, cb) {
      return uploader.off(name, cb);
    }
  };
};
export default UploadyContext;