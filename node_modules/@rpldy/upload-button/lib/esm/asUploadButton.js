function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { forwardRef, useCallback, useRef } from "react";
import { useUploadyContext } from "@rpldy/shared-ui";
export default (function (Component) {
  var AsUploadButton = function (props, ref) {
    var _useUploadyContext = useUploadyContext(),
        showFileUpload = _useUploadyContext.showFileUpload;

    var id = props.id,
        className = props.className,
        text = props.text,
        children = props.children,
        extraProps = props.extraProps,
        onClick = props.onClick,
        uploadOptions = _objectWithoutProperties(props, ["id", "className", "text", "children", "extraProps", "onClick"]); //using ref so onButtonClick can stay memoized


    var uploadOptionsRef = useRef();
    uploadOptionsRef.current = uploadOptions;
    var onButtonClick = useCallback(function (e) {
      showFileUpload(uploadOptionsRef.current);
      onClick === null || onClick === void 0 ? void 0 : onClick(e);
    }, [showFileUpload, uploadOptionsRef, onClick]);
    return /*#__PURE__*/React.createElement(Component, _extends({
      ref: ref,
      onClick: onButtonClick,
      id: id,
      className: className,
      children: children || text || "Upload"
    }, extraProps));
  };

  return /*#__PURE__*/forwardRef(AsUploadButton);
});