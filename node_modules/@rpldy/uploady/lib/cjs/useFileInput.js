"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = require("react");

var _shared = require("@rpldy/shared");

var _sharedUi = require("@rpldy/shared-ui");

//https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#form-submission-algorithm
var getUrl = function (form) {
  var loc = window.location;
  var url = form.getAttribute("action") || "";
  url = url.replace(/\s/g, "");
  var path; // eslint-disable-next-line default-case

  switch (true) {
    //if empty, use same url as page
    case url === "":
      url = loc.href;
      break;
    //starts with "/", make it absolute

    case url.startsWith("/"):
      url = "".concat(loc.protocol, "//").concat(loc.host).concat(url);
      break;
    //not an http(s) and doesnt start with "/", make it relative

    case !/:\/\//.test(url):
      path = loc.pathname.split("/").slice(0, -1).concat("").join("/");
      url = "".concat(loc.protocol, "//").concat(loc.host).concat(path).concat(url);
      break;
  }

  return url;
};

var getDestinationFromInput = function (input) {
  var form = input.closest("form");
  var destination = {
    filesParamName: input.getAttribute("name"),
    method: undefined,
    url: undefined
  };

  if (form) {
    var method = form.getAttribute("method"),
        url = getUrl(form);
    destination.method = method ? method.toUpperCase() : undefined;
    destination.url = url;

    _shared.logger.debugLog("Uploady.useFileInput: using custom input's parent form url ".concat(destination.url, " and method ").concat(destination.method || ""));
  }

  return destination;
};

var _default = function _default(fileInputRef) {
  var context = (0, _sharedUi.useUploadyContext)();
  context.setExternalFileInput(fileInputRef);
  (0, _react.useEffect)(function () {
    //uses Element.prototype.closest so no IE11 support - use polyfill
    if (fileInputRef.current && fileInputRef.current.closest) {
      var input = fileInputRef.current;
      var uploaderOptions = context.getOptions(); //if no destination was passed, try and get from input's parent form

      if (!uploaderOptions.destination || !uploaderOptions.destination.url) {
        var domDestination = getDestinationFromInput(input);
        context.setOptions({
          destination: domDestination
        });
      }
    }
  }, [fileInputRef, context]);
};

exports["default"] = _default;